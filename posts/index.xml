<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 孙志奇的个人博客</title>
		<link>/posts/</link>
		<description>Recent content in Posts on 孙志奇的个人博客</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 10 Apr 2018 00:00:00 +0000</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>django 简介</title>
			<link>/posts/django/</link>
			<pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/django/</guid>
			<description>#django 简介
简介&amp;amp;安装 Django 项目是一个Python定制框架，它源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：用于创建模型的对象关系映射为最终用户设计的完美管理界面一流的 URL 设计设计者友好的模板语言缓存系统。 Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者。 Django2.0中文手册
安装django pip install Django==2.0.4
查看Django当前版本 python -m django &amp;ndash;version
创建django项目 django-admin startproject proname
创建子项目 python manage.py startapp name
启动项目 pyhon manage.py runserver</description>
			<content type="html"><![CDATA[<p>#django 简介</p>

<p>简介&amp;安装
Django 项目是一个Python定制框架，它源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：用于创建模型的对象关系映射为最终用户设计的完美管理界面一流的 URL 设计设计者友好的模板语言缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者。
Django2.0中文手册</p>

<p>安装django  pip install Django==2.0.4</p>

<p>查看Django当前版本   python -m django &ndash;version</p>

<p>创建django项目   django-admin startproject proname</p>

<p>创建子项目  python manage.py startapp name</p>

<p>启动项目  pyhon manage.py runserver</p>
]]></content>
		</item>
		
		<item>
			<title>18个python的高效编程技巧</title>
			<link>/posts/jiqiao/</link>
			<pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/jiqiao/</guid>
			<description>#18个python的高效编程技巧
01 交换变量
   a=3
b=6
   这个情况如果要交换变量在c++中，肯定需要一个空变量。但是python不需要，只需一行，大家看清楚了
   a,b=b,a
print(a)&amp;gt;&amp;gt;&amp;gt;6
ptint(b)&amp;gt;&amp;gt;&amp;gt;5
   02 字典推导(Dictionary comprehensions)和集合推导(Set comprehensions) 大多数的Python程序员都知道且使用过列表推导(list comprehensions)。如果你对list comprehensions概念不是很熟悉——一个list comprehension就是一个更简短、简洁的创建一个list的方法。
   some_list = [1, 2, 3, 4, 5]
another_list = [ x + 1 for x in some_list ]
another_list [2, 3, 4, 5, 6]
   自从python 3.1 起，我们可以用同样的语法来创建集合和字典表：
   Set Comprehensions some_list = [1, 2, 3, 4, 5, 2, 5, 1, 4, 8]</description>
			<content type="html"><![CDATA[

<p>#18个python的高效编程技巧</p>

<p>01 交换变量</p>

<blockquote>
<blockquote>
<blockquote>
<p>a=3</p>

<p>b=6</p>
</blockquote>
</blockquote>
</blockquote>

<p>这个情况如果要交换变量在c++中，肯定需要一个空变量。但是python不需要，只需一行，大家看清楚了</p>

<blockquote>
<blockquote>
<blockquote>
<p>a,b=b,a</p>

<p>print(a)&gt;&gt;&gt;6</p>

<p>ptint(b)&gt;&gt;&gt;5</p>
</blockquote>
</blockquote>
</blockquote>

<p>02 字典推导(Dictionary comprehensions)和集合推导(Set comprehensions)
大多数的Python程序员都知道且使用过列表推导(list comprehensions)。如果你对list comprehensions概念不是很熟悉——一个list comprehension就是一个更简短、简洁的创建一个list的方法。</p>

<blockquote>
<blockquote>
<blockquote>
<p>some_list = [1, 2, 3, 4, 5]</p>

<p>another_list = [ x + 1 for x in some_list ]</p>

<p>another_list
[2, 3, 4, 5, 6]</p>
</blockquote>
</blockquote>
</blockquote>

<p>自从python 3.1 起，我们可以用同样的语法来创建集合和字典表：</p>

<blockquote>
<blockquote>
<blockquote>
<h1 id="set-comprehensions">Set Comprehensions</h1>

<p>some_list = [1, 2, 3, 4, 5, 2, 5, 1, 4, 8]</p>

<p>even_set = { x for x in some_list if x % 2 == 0 }</p>

<p>even_set
set([8, 2, 4])</p>

<h1 id="dict-comprehensions">Dict Comprehensions</h1>

<p>d = { x: x % 2 == 0 for x in range(1, 11) }</p>

<p>d
{1: False, 2: True, 3: False, 4: True, 5: False, 6: True, 7: False, 8: True, 9: False, 10: True}</p>
</blockquote>
</blockquote>
</blockquote>

<p>在第一个例子里，我们以some_list为基础，创建了一个具有不重复元素的集合，而且集合里只包含偶数。而在字典表的例子里，我们创建了一个key是不重复的1到10之间的整数，value是布尔型，用来指示key是否是偶数。</p>

<p>这里另外一个值得注意的事情是集合的字面量表示法。我们可以简单的用这种方法创建一个集合：</p>

<blockquote>
<blockquote>
<blockquote>
<p>my_set = {1, 2, 1, 2, 3, 4}</p>

<p>my_set
set([1, 2, 3, 4])</p>
</blockquote>
</blockquote>
</blockquote>

<p>而不需要使用内置函数set()。</p>

<p>03 计数时使用Counter计数对象。
这听起来显而易见，但经常被人忘记。对于大多数程序员来说，数一个东西是一项很常见的任务，而且在大多数情况下并不是很有挑战性的事情——这里有几种方法能更简单的完成这种任务。</p>

<p>Python的collections类库里有个内置的dict类的子类，是专门来干这种事情的：</p>

<blockquote>
<blockquote>
<blockquote>
<p>from collections import Counter
c = Counter( hello world )</p>

<p>c
Counter({ l : 3,  o : 2,    : 1,  e : 1,  d : 1,  h : 1,  r : 1,  w : 1})</p>

<p>c.most_common(2)
[( l , 3), ( o , 2)]</p>
</blockquote>
</blockquote>
</blockquote>

<p>04 漂亮的打印出JSON
JSON是一种非常好的数据序列化的形式，被如今的各种API和web service大量的使用。使用python内置的json处理，可以使JSON串具有一定的可读性，但当遇到大型数据时，它表现成一个很长的、连续的一行时，人的肉眼就很难观看了。</p>

<p>为了能让JSON数据表现的更友好，我们可以使用indent参数来输出漂亮的JSON。当在控制台交互式编程或做日志时，这尤其有用：</p>

<blockquote>
<blockquote>
<blockquote>
<p>import json</p>

<p>print(json.dumps(data))  # No indention
{&ldquo;status&rdquo;: &ldquo;OK&rdquo;, &ldquo;count&rdquo;: 2, &ldquo;results&rdquo;: [{&ldquo;age&rdquo;: 27, &ldquo;name&rdquo;: &ldquo;Oz&rdquo;, &ldquo;lactose_intolerant&rdquo;: true}, {&ldquo;age&rdquo;: 29, &ldquo;name&rdquo;: &ldquo;Joe&rdquo;, &ldquo;lactose_intolerant&rdquo;: false}]}</p>

<p>print(json.dumps(data, indent=2))  # With indention</p>
</blockquote>
</blockquote>
</blockquote>

<p>{
  &ldquo;status&rdquo;: &ldquo;OK&rdquo;,
  &ldquo;count&rdquo;: 2,
  &ldquo;results&rdquo;: [</p>

<pre><code>{
  &quot;age&quot;: 27,
  &quot;name&quot;: &quot;Oz&quot;,

  &quot;lactose_intolerant&quot;: true
},
{
  &quot;age&quot;: 29,

  &quot;name&quot;: &quot;Joe&quot;,
  &quot;lactose_intolerant&quot;: false
}
</code></pre>

<p>]</p>

<p>}</p>

<p>同样，使用内置的pprint模块，也可以让其它任何东西打印输出的更漂亮。</p>

<p>05 解决FizzBuzz</p>

<p>前段时间Jeff Atwood 推广了一个简单的编程练习叫FizzBuzz，问题引用如下：</p>

<p>写一个程序，打印数字1到100，3的倍数打印“Fizz”来替换这个数，5的倍数打印“Buzz”，对于既是3的倍数又是5的倍数的数字打印“FizzBuzz”。</p>

<p>这里就是一个简短的，有意思的方法解决这个问题：</p>

<p>for x in range(1,101):
    print&rdquo;fizz&rdquo;[x%3*len( fizz )::]+&ldquo;buzz&rdquo;[x%5*len( buzz )::] or x</p>

<p>06 if 语句在行内</p>

<p>print &ldquo;Hello&rdquo; if True else &ldquo;World&rdquo;
&gt;&gt;&gt; Hello</p>

<p>07 连接</p>

<p>下面的最后一种方式在绑定两个不同类型的对象时显得很cool。</p>

<p>nfc = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;]
afc = [&ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
print nfc + afc
&gt;&gt;&gt; [ Packers ,  49ers ,  Ravens ,  Patriots ]</p>

<p>print str(1) + &ldquo; world&rdquo;
&gt;&gt;&gt; 1 world</p>

<p>print <code>1</code> + &ldquo; world&rdquo;
&gt;&gt;&gt; 1 world</p>

<p>print 1, &ldquo;world&rdquo;
&gt;&gt;&gt; 1 world
print nfc, 1
&gt;&gt;&gt; [ Packers ,  49ers ] 1</p>

<p>08 数值比较</p>

<p>这是我见过诸多语言中很少有的如此棒的简便法</p>

<p>x = 2
if 3 &gt; x &gt; 1:
   print x
&gt;&gt;&gt; 2
if 1 &lt; x &gt; 0:
   print x
&gt;&gt;&gt; 2</p>

<p>09 同时迭代两个列表</p>

<p>nfc = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;]
afc = [&ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
for teama, teamb in zip(nfc, afc):
     print teama + &ldquo; vs. &rdquo; + teamb
&gt;&gt;&gt; Packers vs. Ravens
&gt;&gt;&gt; 49ers vs. Patriots</p>

<p>10 带索引的列表迭代</p>

<p>teams = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;, &ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
for index, team in enumerate(teams):
    print index, team
&gt;&gt;&gt; 0 Packers
&gt;&gt;&gt; 1 49ers
&gt;&gt;&gt; 2 Ravens
&gt;&gt;&gt; 3 Patriots</p>

<p>11 列表推导式</p>

<p>已知一个列表，我们可以刷选出偶数列表方法：</p>

<p>numbers = [1,2,3,4,5,6]
even = []
for number in numbers:
    if number%2 == 0:
        even.append(number)</p>

<p>转变成如下：</p>

<p>numbers = [1,2,3,4,5,6]
even = [number for number in numbers if number%2 == 0]</p>

<p>12 字典推导</p>

<p>和列表推导类似，字典可以做同样的工作：</p>

<p>teams = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;, &ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
print {key: value for value, key in enumerate(teams)}
&gt;&gt;&gt; { 49ers : 1,  Ravens : 2,  Patriots : 3,  Packers : 0}</p>

<p>13 初始化列表的值</p>

<p>items = [0]*3
print items
&gt;&gt;&gt; [0,0,0]</p>

<p>14 列表转换为字符串</p>

<p>teams = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;, &ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
print &ldquo;, &ldquo;.join(teams)
&gt;&gt;&gt;  Packers, 49ers, Ravens, Patriots</p>

<p>15 从字典中获取元素</p>

<p>我承认try/except代码并不雅致，不过这里有一种简单方法，尝试在字典中找key，如果没有找到对应的alue将用第二个参数设为其变量值。</p>

<p>data = { user : 1,  name :  Max ,  three : 4}
try:
   is_admin = data[ admin ]
except KeyError:
   is_admin = False</p>

<p>替换成这样</p>

<p>data = { user : 1,  name :  Max ,  three : 4}
is_admin = data.get( admin , False)</p>

<p>16 获取列表的子集</p>

<p>有时，你只需要列表中的部分元素，这里是一些获取列表子集的方法。</p>

<p>x = [1,2,3,4,5,6]
#前3个
print x[:3]
&gt;&gt;&gt; [1,2,3]
#中间4个
print x[1:5]
&gt;&gt;&gt; [2,3,4,5]
#最后3个
print x[3:]
&gt;&gt;&gt; [4,5,6]
#奇数项
print x[::2]
&gt;&gt;&gt; [1,3,5]
#偶数项
print x[1::2]
&gt;&gt;&gt; [2,4,6]</p>

<p>除了python内置的数据类型外，在collection模块同样还包括一些特别的用例，在有些场合Counter非常实用。如果你参加过在这一年的Facebook HackerCup，你甚至也能找到他的实用之处。</p>

<p>from collections import Counter
print Counter(&ldquo;hello&rdquo;)
&gt;&gt;&gt; Counter({ l : 2,  h : 1,  e : 1,  o : 1})</p>

<p>17 迭代工具</p>

<p>和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有不能的组合方式</p>

<p>from itertools import combinations
teams = [&ldquo;Packers&rdquo;, &ldquo;49ers&rdquo;, &ldquo;Ravens&rdquo;, &ldquo;Patriots&rdquo;]
for game in combinations(teams, 2):
    print game
&gt;&gt;&gt; ( Packers ,  49ers )
&gt;&gt;&gt; ( Packers ,  Ravens )
&gt;&gt;&gt; ( Packers ,  Patriots )
&gt;&gt;&gt; ( 49ers ,  Ravens )
&gt;&gt;&gt; ( 49ers ,  Patriots )
&gt;&gt;&gt; ( Ravens ,  Patriots )</p>

<p>18 False == True</p>

<p>比起实用技术来说这是一个很有趣的事，在python中，True和False是全局变量，因此：</p>

<p>False = True
if False:
   print &ldquo;Hello&rdquo;
else:
   print &ldquo;World&rdquo;
&gt;&gt;&gt; Hello</p>
]]></content>
		</item>
		
		<item>
			<title>python 二维码</title>
			<link>/posts/erweima/</link>
			<pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/erweima/</guid>
			<description>#用python生成二维码
python中有一个好玩的库，不仅可以生成各种花色的二维码，还可以生成动态二维码。 MyQR是一个能够生成自定义二维码的第三方库，可以根据需要生成普通二维码、带图片的艺术二维码，也可以生成动态二维码 效果图如下： 首先安装MyQR库，直接用pip install myqr(or MyQR)。需要注意的是MyQR依赖于python3，在python2的环境下可能无法正常运行。 1.生成普通二维码 在程序中导入MyQR包下的模板myqr，其中word参数接收一个字符串作为二维码的内容。 from MyQR import myqr #注意大小写 myqr.run(words=&amp;quot;网址链接或者字符串，不支持中文&amp;quot;) 运行后生成一个名为“qrcode.png”的二维码图片，用微信扫一扫生成的二维码，就会自动跳转到这个地址。 2.生成带图片的二维码 myqr.run(words=&#39;https://www.cnblogs.com/Estate-47/&#39;, picture=&#39;girl.jpg&#39;,colorized=True) #图片要和代码保持同一路径 此为彩色图片代码，需要黑白图片就去掉参数colorized=True。另外注意把图片和代码放在同一路径中，否则会报错找不到图片 from MyQR import myqr myqr.run( words=&#39;网址链接或者字符串，不支持中文&#39;, # 扫描二维码后，显示的内容，或是跳转的链接 version=5, # 设置容错率 level=&#39;H&#39;, # 控制纠错水平，范围是L、M、Q、H，从左到右依次升高 picture=&#39;7cf0bfb0bb10ea94d19455a13f62a05.png&#39;, # 图片所在目录，可以是动图 colorized=True, # 黑白(False)还是彩色(True) contrast=1.0, # 用以调节图片的对比度，1.0 表示原始图片。默认为1.0。 brightness=1.0, # 用来调节图片的亮度，用法同上。 save_name=&#39;7cfaa.png&#39;, # 控制输出文件名，格式可以是 .jpg， .png ，.bmp ，.gif ) 3.生成动态二维码 可以直接在命令中使用myqr指令生成需要的二维码 myqr &#39;https://www.cnblogs.com/Estate-47/&#39; -p QX.gif -c myqr.run(words=&#39;https://www.cnblogs.com/Estate-47/&#39;, 5 picture=&#39;QX.gif&#39;,colorized=True)  </description>
			<content type="html"><![CDATA[<p>#用python生成二维码</p>

<pre><code>python中有一个好玩的库，不仅可以生成各种花色的二维码，还可以生成动态二维码。

MyQR是一个能够生成自定义二维码的第三方库，可以根据需要生成普通二维码、带图片的艺术二维码，也可以生成动态二维码

效果图如下：
首先安装MyQR库，直接用pip install myqr(or MyQR)。需要注意的是MyQR依赖于python3，在python2的环境下可能无法正常运行。

1.生成普通二维码

在程序中导入MyQR包下的模板myqr，其中word参数接收一个字符串作为二维码的内容。

from MyQR import myqr  #注意大小写
myqr.run(words=&quot;网址链接或者字符串，不支持中文&quot;)
 

 

运行后生成一个名为“qrcode.png”的二维码图片，用微信扫一扫生成的二维码，就会自动跳转到这个地址。

2.生成带图片的二维码

myqr.run(words='https://www.cnblogs.com/Estate-47/', picture='girl.jpg',colorized=True) 
#图片要和代码保持同一路径
此为彩色图片代码，需要黑白图片就去掉参数colorized=True。另外注意把图片和代码放在同一路径中，否则会报错找不到图片


from MyQR import myqr
myqr.run(
    words='网址链接或者字符串，不支持中文',
    # 扫描二维码后，显示的内容，或是跳转的链接
    version=5,  # 设置容错率
    level='H',  # 控制纠错水平，范围是L、M、Q、H，从左到右依次升高
    picture='7cf0bfb0bb10ea94d19455a13f62a05.png',  # 图片所在目录，可以是动图
    colorized=True,  # 黑白(False)还是彩色(True)
    contrast=1.0,  # 用以调节图片的对比度，1.0 表示原始图片。默认为1.0。
    brightness=1.0,  # 用来调节图片的亮度，用法同上。
    save_name='7cfaa.png',  # 控制输出文件名，格式可以是 .jpg， .png ，.bmp ，.gif
)

 

 

3.生成动态二维码

可以直接在命令中使用myqr指令生成需要的二维码
myqr 'https://www.cnblogs.com/Estate-47/' -p QX.gif -c 
myqr.run(words='https://www.cnblogs.com/Estate-47/', 5 picture='QX.gif',colorized=True)


</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue样式的动态绑定</title>
			<link>/posts/vue6/</link>
			<pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue6/</guid>
			<description>vue样式的动态绑定 true显示样式，flase不显示
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue的样式绑定&amp;lt;/title&amp;gt; &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; .active{ background-color: gold; color:blue; } &amp;lt;/style&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload = function(){ var app = new Vue({ el:&amp;quot;#a&amp;quot;, data:{ //激活 false isactive:true } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;a&amp;quot;&amp;gt;人生最棒的是不后悔 &amp;lt;div v-bind:class=&amp;quot;{ active:isactive }&amp;quot; style=&amp;quot;width: 200px&amp;quot;&amp;gt; 人生最难的是不留遗憾 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  </description>
			<content type="html"><![CDATA[<p>vue样式的动态绑定
true显示样式，flase不显示</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;vue的样式绑定&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
    .active{
        background-color: gold;
        color:blue;
    }

    &lt;/style&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;

    window.onload = function(){

        var app = new Vue({
            el:&quot;#a&quot;,
            data:{
                //激活 false
                isactive:true
            }

        });
    }

    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
    
    &lt;div id=&quot;a&quot;&gt;人生最棒的是不后悔
    &lt;div v-bind:class=&quot;{ active:isactive }&quot; style=&quot;width: 200px&quot;&gt;
    人生最难的是不留遗憾
    &lt;/div&gt;
    &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue表单选项框</title>
			<link>/posts/vue5/</link>
			<pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue5/</guid>
			<description>#vue表单选项框 选项框选的内容在下面显示
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue表单的学习&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; //单一入口 window.onload = function(){ var app = new Vue({ el:&amp;quot;#a&amp;quot;, data:{ message:&#39;你好&#39; } }); // 多选框的增删改查 var app = new Vue({ el:&amp;quot;#b&amp;quot;, data:{ checknames:[] } }); // 单选框 var app = new Vue({ el:&amp;quot;#c&amp;quot;, data:{ picked:&amp;quot;&amp;quot;,gender:&amp;quot;男&amp;quot; } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id = &amp;quot;a&amp;quot;&amp;gt; &amp;lt;!-- 双向绑定用 v-model绑定 --&amp;gt; &amp;lt;input type=&#39;text&#39; v-model=&#39;message&#39;/&amp;gt; 设置的变量内容是: {{message}} &amp;lt;!</description>
			<content type="html"><![CDATA[<p>#vue表单选项框
选项框选的内容在下面显示</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;vue表单的学习&lt;/title&gt;
    &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        //单一入口
    window.onload = function(){
        var app = new Vue({

            el:&quot;#a&quot;,
            data:{
                message:'你好'
            }
        });
        // 多选框的增删改查
        var app = new Vue({
            el:&quot;#b&quot;,
            data:{
                checknames:[]
            }
        });
        // 单选框
        var app = new Vue({
            el:&quot;#c&quot;,
            data:{
                picked:&quot;&quot;,gender:&quot;男&quot;
            }
        });
    }
    
    &lt;/script&gt;
    
&lt;/head&gt;
&lt;body&gt;
    &lt;div id = &quot;a&quot;&gt;
        &lt;!-- 双向绑定用 v-model绑定 --&gt;
    &lt;input type='text' v-model='message'/&gt;

    设置的变量内容是: {{message}}
    &lt;!-- 多行文本域 textarea --&gt;
    &lt;textarea v-model=&quot;message&quot; style=&quot;height:300px&quot;&gt;&lt;/textarea&gt;&lt;br/&gt;

    &lt;!-- 多选框的绑定 checkbox label是标签属性，来注明多选框的内容 --&gt;
    &lt;input type='checkbox' name=&quot;crouse&quot; value='mysql'/&gt;
    &lt;label&gt;mysql&lt;/label&gt;

    &lt;input type=&quot;checkbox&quot; name=&quot;crouse&quot; value=&quot;jquery&quot;/&gt;
    &lt;label&gt;jquery&lt;/label&gt;

    &lt;input type=&quot;checkbox&quot; name=&quot;crouse&quot; value=&quot;vue&quot;/&gt;
    &lt;label&gt;vue&lt;/label&gt;
    &lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;!-- 多选框的绑定并显示出来 --&gt;
&lt;div id=&quot;b&quot;&gt;
     
     &lt;!-- 多选框的绑定 checkbox label是标签属性，来注明多选框的内容 --&gt;
     &lt;input type='checkbox' name=&quot;crouse&quot; value='mysql' v-model=&quot;checknames&quot; /&gt;
     &lt;label&gt;mysql&lt;/label&gt;
 
     &lt;input type=&quot;checkbox&quot; name=&quot;crouse&quot; value=&quot;jquery&quot; v-model=&quot;checknames&quot;/&gt;
     &lt;label&gt;jquery&lt;/label&gt;
 
     &lt;input type=&quot;checkbox&quot; name=&quot;crouse&quot; value=&quot;vue&quot; v-model=&quot;checknames&quot;/&gt;
     &lt;label&gt;vue&lt;/label&gt;
     &lt;!-- 用vue的模板语法来打印勾选的课程列表 --&gt;
     {{ checknames }} &lt;label&gt;这是你所选的课程&lt;/label&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;!-- vue的单选标签 --&gt;
    &lt;div id=&quot;c&quot;&gt;
        &lt;!-- name 分组 --&gt;
        &lt;input type=&quot;radio&quot; name=&quot;yesorno&quot; value=&quot;是&quot; v-model=&quot;picked&quot; /&gt;
        &lt;label&gt;是&lt;/label&gt;
        &lt;input type=&quot;radio&quot; name=&quot;yesorno&quot; value=&quot;否&quot; v-model=&quot;picked&quot; /&gt;
        &lt;label&gt;否&lt;/label&gt;
        &lt;input type=&quot;radio&quot; name=&quot;nanornv&quot; value=&quot;男&quot; v-model=&quot;gender&quot; /&gt;
        &lt;label&gt;男&lt;/label&gt;
        &lt;input type=&quot;radio&quot; name=&quot;nanornv&quot; value=&quot;女&quot; v-model=&quot;gender&quot; /&gt;
        &lt;label&gt;女&lt;/label&gt;
        &lt;br/&gt;
        &lt;span&gt;你选中的是：{{ picked }}  ，&amp;nbsp;选择性别：{{ gender }}&lt;/span&gt;
    &lt;/div&gt;


&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue简单逻辑判断</title>
			<link>/posts/vue4/</link>
			<pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue4/</guid>
			<description>#vue简单逻辑判断 条件判断能否显示
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue的逻辑判断学习&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload= function(){ var app = new Vue({ el:&amp;quot;#a&amp;quot;, data:{ //能否显示 seen:true, seen1:false } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;a&amp;quot;&amp;gt; &amp;lt;!-- 使用vue的判断标签来显示或者隐藏元素 --&amp;gt; &amp;lt;p v-if=&amp;quot;seen&amp;quot;&amp;gt;你能看见我&amp;lt;/p&amp;gt; &amp;lt;span v-if=&amp;quot;seen1&amp;quot;&amp;gt;你不能看见我&amp;lt;/span&amp;gt; &amp;lt;!-- 判断 if else 随机出现--&amp;gt; &amp;lt;div v-if=&amp;quot;Math.random() &amp;gt; 0.5&amp;quot;&amp;gt; 现在你能看见我 &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; 你现在看不见我 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  </description>
			<content type="html"><![CDATA[<p>#vue简单逻辑判断
条件判断能否显示</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;vue的逻辑判断学习&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;

    window.onload= function(){

        var app = new Vue({
            el:&quot;#a&quot;,
            data:{
                //能否显示
                seen:true,
                seen1:false
            }

        });

    }

    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    
    &lt;div id=&quot;a&quot;&gt;
        &lt;!-- 使用vue的判断标签来显示或者隐藏元素 --&gt;
        &lt;p v-if=&quot;seen&quot;&gt;你能看见我&lt;/p&gt;
        &lt;span v-if=&quot;seen1&quot;&gt;你不能看见我&lt;/span&gt;
            &lt;!-- 判断 if else 随机出现--&gt;
        &lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;
        现在你能看见我
        &lt;/div&gt;
        &lt;div v-else&gt;
        你现在看不见我
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue的选项卡功能</title>
			<link>/posts/vue3/</link>
			<pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue3/</guid>
			<description>#vue的选项卡功能 选项卡：点击不同的按钮会显示不同的内容
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue选项卡学习&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box{ border:1px solid blueviolet; height: 228px; width: 323px; background-color: bisque; } &amp;lt;/style&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload= function(){ var app = new Vue({ el:&amp;quot;#app&amp;quot;, data:{ tabId:0 } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;!-- tab 选项 --&amp;gt; &amp;lt;div class=&amp;quot;tab&amp;quot;&amp;gt; &amp;lt;!-- 制作选项卡头部的网页 click单击--&amp;gt; &amp;lt;a href=&amp;quot;#&amp;quot; @click=&amp;quot;tabId=0&amp;quot; class=&amp;quot;{tabId=0}&amp;quot;&amp;gt; &amp;lt;!-- button 按钮 --&amp;gt; &amp;lt;button style=&amp;quot;background-color:blueviolet&amp;quot;&amp;gt; mysql&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;#&amp;quot; @click=&amp;quot;tabId=1&amp;quot; class=&amp;quot;{tabId=1}&amp;quot;&amp;gt; &amp;lt;button style=&amp;quot;background-color:palevioletred&amp;quot;&amp;gt;jquery&amp;lt;/button&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;#&amp;quot; @click=&amp;quot;tabId=2&amp;quot; class=&amp;quot;{tabId=2}&amp;quot;&amp;gt; &amp;lt;button style=&amp;quot;background-color:aqua&amp;quot;&amp;gt;vue.</description>
			<content type="html"><![CDATA[<p>#vue的选项卡功能
选项卡：点击不同的按钮会显示不同的内容</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;vue选项卡学习&lt;/title&gt;
    &lt;style&gt;
    .box{
        border:1px solid blueviolet;
        height: 228px;
        width: 323px;
         background-color: bisque;
    }
    
    &lt;/style&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        window.onload= function(){
            var app = new Vue({
                el:&quot;#app&quot;,
                data:{
                    tabId:0
                }
            });
        }       
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    
    &lt;div id=&quot;app&quot;&gt;
        &lt;!-- tab 选项 --&gt;
        &lt;div class=&quot;tab&quot;&gt; 
            &lt;!-- 制作选项卡头部的网页 click单击--&gt;
            &lt;a href=&quot;#&quot; @click=&quot;tabId=0&quot; class=&quot;{tabId=0}&quot;&gt;
                &lt;!-- button 按钮 --&gt;
               &lt;button style=&quot;background-color:blueviolet&quot;&gt; mysql&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;#&quot; @click=&quot;tabId=1&quot; class=&quot;{tabId=1}&quot;&gt;
                &lt;button style=&quot;background-color:palevioletred&quot;&gt;jquery&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;#&quot; @click=&quot;tabId=2&quot; class=&quot;{tabId=2}&quot;&gt;
                &lt;button style=&quot;background-color:aqua&quot;&gt;vue.js&lt;/button&gt;
            &lt;/a&gt;
        &lt;/div&gt;
        &lt;br/&gt;
        &lt;!-- box 内容 --&gt;
        &lt;div class=&quot;box&quot; &gt;
            &lt;!-- 制作选项卡内容 === 是判断 --&gt;
            &lt;div v-show=&quot;tabId===0&quot; style=&quot;background-color:brown&quot;&gt;mysql的内容
            &lt;img src=&quot;./微信图片_20181121185958.jpg&quot;/&gt;
            &lt;/div&gt;
            &lt;div v-show=&quot;tabId===1&quot;&gt;
            &lt;img src=&quot;./微信图片_20181121185952.jpg&quot; width=&quot;300&quot; height=&quot;200&quot;/&gt;    
                jquery的内容
            &lt;/div&gt;
            &lt;div v-show=&quot;tabId===2&quot;&gt;
            &lt;img src=&quot;./微信图片_20181121185947.jpg&quot; width=&quot;320&quot; height=&quot;200&quot;/&gt;      
                vue.js的内容
            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue简单的监听属性</title>
			<link>/posts/vue2/</link>
			<pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue2/</guid>
			<description>##简单vue的监听属性(单位换算) 单位换算
单位换算可以根据实际情况换
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue.js的监听属性&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&#39;./js/vue.js&#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload = function(){ //建立vue对象 var app = new Vue({ el:&amp;quot;#a&amp;quot;, data:{ kilometers:0, meters:0, decimetre:0 }, //监听属性开始 watch:{ kilometers:function(val){ this.kilometers = val; this.decimetre = val * 10000; this.meters = val * 1000; }, meters:function(val){ this.kilometers = val / 1000; this.decimetre = val * 10; this.meters=val; }, decimetre:function(val){ this.kilometers = val /10000; this.meters = val / 10; this.</description>
			<content type="html"><![CDATA[<p>##简单vue的监听属性(单位换算)
单位换算</p>

<p>单位换算可以根据实际情况换</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;vue.js的监听属性&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src='./js/vue.js'&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    window.onload = function(){

        //建立vue对象

        var app = new Vue({

            el:&quot;#a&quot;,
            data:{
                kilometers:0,
                meters:0,
                decimetre:0
            },
            //监听属性开始
            watch:{
                kilometers:function(val){
                    this.kilometers = val;
                    this.decimetre = val * 10000;
                    this.meters = val * 1000;

                },
                meters:function(val){
                    this.kilometers = val / 1000;
                    this.decimetre = val * 10;
                    this.meters=val;
                },
                decimetre:function(val){
                    this.kilometers = val /10000;
                    this.meters = val / 10;
                    this.decimetre = val;
                }
            }
        });

    }
    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;a&quot;&gt;
    千米： &lt;input type=&quot;text&quot; v-model = &quot;kilometers&quot;/&gt;&lt;br/&gt;
    米：    &lt;input type=&quot;text&quot; v-model = &quot;meters&quot;/&gt;&lt;br/&gt;
    分米： &lt;input type=&quot;text&quot; v-model = &quot;decimetre&quot;/&gt;&lt;br/&gt;

    &lt;/div&gt;


    
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue简单的计算属性</title>
			<link>/posts/vue1/</link>
			<pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue1/</guid>
			<description>###简单的Vue计算属性 倒转字符串
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue.js的计算属性&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload = function(){ //建立vue对象 var app = new Vue({ el:&amp;quot;#a&amp;quot;, data:{ message : &amp;quot;你好吗&amp;quot; }, computed:{ reverseMessage:function(){ return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;) } } }); var a = new Vue({ el:&amp;quot;#q&amp;quot;, data:{ message:&amp;quot;你是谁&amp;quot; } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;a&amp;quot;&amp;gt; &amp;lt;!-- 颠倒字符串 --&amp;gt; {{ message }}&amp;lt;br/&amp;gt; {{ reverseMessage }} &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;q&amp;quot;&amp;gt; {{message.split(&#39;&#39;).reverse(&#39;&#39;).join(&#39;&#39;)}} &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  </description>
			<content type="html"><![CDATA[<p>###简单的Vue计算属性
倒转字符串</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;vue.js的计算属性&lt;/title&gt;
    
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;

    window.onload = function(){
        //建立vue对象
        var app = new Vue({

            el:&quot;#a&quot;,
            data:{
                message : &quot;你好吗&quot;
            },
            computed:{

                reverseMessage:function(){

                    return this.message.split('').reverse().join('')
                }
            }

        });
        var a = new Vue({
            el:&quot;#q&quot;,
            data:{
                message:&quot;你是谁&quot;
            }
        });
    
    }
    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;a&quot;&gt;
    &lt;!-- 颠倒字符串 --&gt;
    {{ message }}&lt;br/&gt;
    {{ reverseMessage }}
    &lt;/div&gt;
    &lt;div id=&quot;q&quot;&gt;
    {{message.split('').reverse('').join('')}}
    &lt;/div&gt;



&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>vue.js入门</title>
			<link>/posts/vue/</link>
			<pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/vue/</guid>
			<description>###vue.js入门
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;vue.js的入门&amp;lt;/title&amp;gt; &amp;lt;!-- 导入 --&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./js/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; //单一入口 window.onload = function(){ //建立vue对象 var app = new Vue({ //el 属性用来绑定元素节点 el:&amp;quot;#app&amp;quot;, //data 属性用来绑定数据 data:{ message:&#39;Hello World&#39; } }); // 建立vue对象 var app2 = new Vue({ //绑定元素节点 el:&amp;quot;#app2&amp;quot;, data:{ message:&#39;页面加载&#39;+new Date().toLocaleString() } }); } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;!-- vue的模板语法，用来输出变量 --&amp;gt; {{ message }} &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;app2&amp;quot;&amp;gt; &amp;lt;!-- 把title属性和message变量联系起来 --&amp;gt; &amp;lt;span v-bind:title=&amp;quot;message&amp;quot;&amp;gt; 请让鼠标悬停一秒钟，来观看这个页面刷新的时间 &amp;lt;/span&amp;gt; &amp;lt;div title=&amp;quot;静态绑定信息&amp;quot;&amp;gt;静态绑定&amp;lt;/div&amp;gt; &amp;lt;a href=&amp;quot;#&amp;quot; title=&amp;quot;这是一个空链接&amp;quot;&amp;gt; 悬停查看显示&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  </description>
			<content type="html"><![CDATA[<p>###vue.js入门</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;vue.js的入门&lt;/title&gt;
    &lt;!-- 导入 --&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        //单一入口
        window.onload = function(){
            //建立vue对象
            var app = new Vue({
                //el 属性用来绑定元素节点
                el:&quot;#app&quot;,
                //data 属性用来绑定数据
                data:{

                    message:'Hello World'
                }

            });
            // 建立vue对象
            var app2 = new Vue({
                //绑定元素节点
                el:&quot;#app2&quot;,
                data:{

                    message:'页面加载'+new Date().toLocaleString()
                }

            });
        }

    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!-- vue的模板语法，用来输出变量 --&gt;
        {{ message }}
    &lt;/div&gt;
    &lt;div id=&quot;app2&quot;&gt;
        &lt;!-- 把title属性和message变量联系起来 --&gt;
        &lt;span v-bind:title=&quot;message&quot;&gt;
        请让鼠标悬停一秒钟，来观看这个页面刷新的时间
        &lt;/span&gt;
        &lt;div title=&quot;静态绑定信息&quot;&gt;静态绑定&lt;/div&gt;
        &lt;a href=&quot;#&quot; title=&quot;这是一个空链接&quot;&gt; 悬停查看显示&lt;/a&gt;
    &lt;/div&gt;
    
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>jquery</title>
			<link>/posts/jquery/</link>
			<pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/jquery/</guid>
			<description>#jquery鼠标键盘悬停事件，形变动画和淡入淡出 鼠标和键盘悬停
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;head&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;鼠标悬停&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&#39;./js/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&#39;text/javascript&#39;&amp;gt; $(function(){ //监听鼠标悬停事件 $(&amp;quot;#b&amp;quot;).mouseover(function(){ //用类选择器修改元素的样式 $(&amp;quot;.c&amp;quot;).css(&amp;quot;background-color&amp;quot;,&amp;quot;pink&amp;quot;) $(&amp;quot;.c&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;green&amp;quot;) $(&amp;quot;.c&amp;quot;).css(&amp;quot;font-size&amp;quot;,&amp;quot;30px&amp;quot;) }) }); // 用类选择器修改鼠标离开事件 $(function(){ //监听鼠标悬停事件 $(&amp;quot;#b&amp;quot;).mouseout(function(){ //用类选择器修改元素的样式 $(&amp;quot;.c&amp;quot;).css(&amp;quot;background-color&amp;quot;,&amp;quot;white&amp;quot;) $(&amp;quot;.c&amp;quot;).css(&amp;quot;color&amp;quot;,&amp;quot;red&amp;quot;) $(&amp;quot;.c&amp;quot;).css(&amp;quot;font-size&amp;quot;,&amp;quot;16px&amp;quot;) }) }); // 用类选择器修改鼠标离开事件 $(function(){ $(&amp;quot;#z&amp;quot;).mouseover(function(){ $(&amp;quot;#z&amp;quot;).css(&amp;quot;background-color&amp;quot;,&amp;quot;pink&amp;quot;) }); }); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;c&amp;quot;&amp;gt;风萧萧兮易水寒，壮士一去兮不复返&amp;lt;/div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;z&amp;quot; value=&amp;quot;悬停变色&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;img id=&amp;quot;b&amp;quot; src=&amp;quot;./img/微信图片_20181121185908.jpg&amp;quot; /&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  形变动画
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;animate 动画&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;.</description>
			<content type="html"><![CDATA[<p>#jquery鼠标键盘悬停事件，形变动画和淡入淡出<br/>
鼠标和键盘悬停<br/></p>

<pre><code>&lt;!DOCTYPE html&gt;&lt;br/&gt;
&lt;html lang=&quot;en&quot;&gt;&lt;br/&gt;
&lt;head&gt;&lt;br/&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;鼠标悬停&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src='./js/jquery.min.js'&gt;&lt;/script&gt;
    &lt;script type='text/javascript'&gt; 
        $(function(){
            //监听鼠标悬停事件
            $(&quot;#b&quot;).mouseover(function(){

                //用类选择器修改元素的样式
                $(&quot;.c&quot;).css(&quot;background-color&quot;,&quot;pink&quot;)
                $(&quot;.c&quot;).css(&quot;color&quot;,&quot;green&quot;)
                $(&quot;.c&quot;).css(&quot;font-size&quot;,&quot;30px&quot;)
            })
        });
        // 用类选择器修改鼠标离开事件
        $(function(){
            //监听鼠标悬停事件
            $(&quot;#b&quot;).mouseout(function(){

                //用类选择器修改元素的样式
                $(&quot;.c&quot;).css(&quot;background-color&quot;,&quot;white&quot;)
                $(&quot;.c&quot;).css(&quot;color&quot;,&quot;red&quot;)
                $(&quot;.c&quot;).css(&quot;font-size&quot;,&quot;16px&quot;)
            })
        });
        // 用类选择器修改鼠标离开事件
        $(function(){
    
            $(&quot;#z&quot;).mouseover(function(){    
                $(&quot;#z&quot;).css(&quot;background-color&quot;,&quot;pink&quot;)
            });
        });

    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;c&quot;&gt;风萧萧兮易水寒，壮士一去兮不复返&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;input type=&quot;button&quot; id=&quot;z&quot; value=&quot;悬停变色&quot;&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;img id=&quot;b&quot;  src=&quot;./img/微信图片_20181121185908.jpg&quot; /&gt;&lt;br/&gt;&lt;br/&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>形变动画</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;animate 动画&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    //jquery单一入口
    
    $(function(){
        $(&quot;#b2&quot;).click(function(){
            //通过标签选择器来进行动画操作
            $(&quot;div&quot;).animate({

                left:'400px',
                width:'400px',
                // margin:'200px'
                height:'300px'        
            });
            $(&quot;div&quot;).animate({

                left:'600px',
                    
            });

    });

    });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!-- position: absolute  绝对定位 --&gt;
    &lt;div style='background-color:yellow;width :100px;height: 100px;position: absolute;'&gt;&lt;/div&gt;  
    &lt;br/&gt;&lt;br/&gt;
    &lt;input style=&quot;margin-top:400px;&quot; type=&quot;button&quot; id=&quot;b2&quot; value=&quot;开始动画&quot;/&gt;

    
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>淡入淡出</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;jquery的学习&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;./js/jquery.min.js&quot;&gt;&lt;/script&gt;

     &lt;!-- jquery代码的入口，用来等待页面元素全部加载完成 --&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    
    $(function() {
        /*  用jquery选择器来选取某一个div的内容*/
        
        var coo=$(&quot;#b&quot;).html();
    
         var con= $(&quot;.a&quot;).val();
         alert(con)
        // jquery绑定点击事件 click 单击 hide 隐藏 参数单位是毫秒
        $(&quot;.a&quot;).click(function(){
            //隐藏div
            // $(&quot;#b&quot;).hide(3000);
            $(&quot;#b&quot;).fadeOut(3000); //慢慢消失 淡出
         });
        $(&quot;.a1&quot;).click(function(){
        
            $(&quot;#b&quot;).fadeIn(3000); //慢慢出来 淡入
         });

        $(&quot;#aa&quot;).click(function(){
            $(&quot;#b&quot;).fadeToggle(1000);
        });

    });

    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;b&quot;&gt;
 &lt;img src=&quot;./img/微信图片_20181121185908.jpg&quot;/&gt;
&lt;/div&gt;
&lt;input id='b' type=&quot;text&quot; width=&quot;200&quot; value=&quot;默认显示&quot; /&gt;
&lt;input class='a' type=&quot;button&quot; value=&quot;滚蛋吧肿瘤君&quot;/&gt;
&lt;input class='a1' type=&quot;button&quot; value=&quot;出来吧皮卡丘&quot;/&gt;
&lt;input id=&quot;aa&quot; type=&quot;button&quot; value=&quot;出来再进去&quot;&gt;


&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>udp协议</title>
			<link>/posts/udp/</link>
			<pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/udp/</guid>
			<description>#udp协议 udp协议 优点：速度快 高效 应用：聊天软件 缺点：不稳定 连接不稳定 服务端代码： import socket
#定义ip地址和端口 HOST=&amp;ldquo;192.168.1.31&amp;rdquo; PORT=6613
#创建套接字 u = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
#绑定端口 u.bind((HOST,PORT))
while True: conn,ip=u.recvfrom(1024) print(conn.decode())
u.close() udp客户端代码 import socket
HOST=&amp;ldquo;192.168.1.31&amp;rdquo; PORT=6613 u=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) data=input(&amp;ldquo;输入你要说的话：&amp;rdquo;) u.sendto(data.encode(),(HOST,PORT)) u.close()</description>
			<content type="html"><![CDATA[

<p>#udp协议
udp协议  优点：速度快 高效      应用：聊天软件
                缺点：不稳定  连接不稳定
服务端代码：
import socket</p>

<p>#定义ip地址和端口
HOST=&ldquo;192.168.1.31&rdquo;
PORT=6613</p>

<p>#创建套接字
u = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</p>

<p>#绑定端口
u.bind((HOST,PORT))</p>

<h1 id="while-true">while True:</h1>

<p>conn,ip=u.recvfrom(1024)
print(conn.decode())</p>

<p>u.close()
udp客户端代码
import socket</p>

<p>HOST=&ldquo;192.168.1.31&rdquo;
PORT=6613
u=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
data=input(&ldquo;输入你要说的话：&rdquo;)
u.sendto(data.encode(),(HOST,PORT))
u.close()</p>

<p><img src="../../public/images/ScreenClip.png" alt="avatar" /></p>
]]></content>
		</item>
		
		<item>
			<title>谈Web前端-html</title>
			<link>/posts/html1/</link>
			<pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/html1/</guid>
			<description>##谈Web前端-html
什么是HTML？
 HTML 是用来描述网页的一种语言；  　HTML 值得是超文本标记语言：Hyper Text Markup Language
 HTML 不是一种编程语言，而是一种标记语言，标记语言是一套标记标签； HTML 使用标记标签来描述网页； HTML 文档包含了HTML标签及文本内容； HTML 文档也叫做 web页面，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑他，如果用浏览器打开，浏览器会按 照标签描述内容将文件渲染成网页。  HTML简介
　&amp;lt;!DOCTYPE html&amp;gt; 声明为html文档
　元素是html页面的根元素
　元素包含了文档的元数据
　定义网页编码格式为 utf-8
　标题　　
　 包含了写入的内容
　
　
&amp;lt;!DOCTYPE html&amp;gt;  你今天很棒呦     嘿！姑娘   I can 上九天揽月
下五洋捉鳖 for you</description>
			<content type="html"><![CDATA[<p>##谈Web前端-html</p>

<p>什么是HTML？</p>

<pre><code> HTML 是用来描述网页的一种语言；
</code></pre>

<p>　 HTML 值得是超文本标记语言：Hyper Text Markup Language</p>

<pre><code> HTML 不是一种编程语言，而是一种标记语言，标记语言是一套标记标签；

 HTML 使用标记标签来描述网页；

 HTML 文档包含了HTML标签及文本内容；

 HTML 文档也叫做 web页面，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑他，如果用浏览器打开，浏览器会按         照标签描述内容将文件渲染成网页。
</code></pre>

<p>HTML简介</p>

<p>　　&lt;!DOCTYPE html&gt; 声明为html文档</p>

<p>　　<html>元素是html页面的根元素</p>

<p>　　<head>元素包含了文档的元数据</p>

<p>　　<meta charset='' utf-8''> 定义网页编码格式为 utf-8</p>

<p>　　<title>标题</title>　　</p>

<p>　　</head></p>

<p>　　<body> 包含了写入的内容</p>

<p>　　</body></p>

<p>　　</html></p>

<p>&lt;!DOCTYPE html&gt;
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>你今天很棒呦</title>
</head>
<body>
    <div>
    <h1>
    <font color="pink">嘿！姑娘</font>
    </h1>
    <p>
       <h2><font color="dark" face="华文楷体">I can 上九天揽月<br />下五洋捉鳖 for you</font></h2>
    </p>
    <br/>
    <!-- 相对路径打出图片 ./同级目录 ../上一级目录 ../../  | ./目录名/ 下一级目录-->
    <img src="./微信图片_20181121185908.jpg" width="600" height="400" /> <br/>
    <marquee scrollamout='50'><a href="http://www.192.168.1.238" target="_blank"></a></marquee>
    <!-- 插入歌曲 controls 设定开始-->
    <audio controls="controls">
    <source src="D:\KuGou\许嵩 - 有何不可.mp3" >
    </audio>
    <!-- 插入视频 .MP4 -->
    <video controls="controls" src="D:\KuGou\Wiz Khalifa、Charlie Puth - See You Again.mkv"></video>
    </div>
</body>
</html></p>
]]></content>
		</item>
		
		<item>
			<title>http</title>
			<link>/posts/http/</link>
			<pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/http/</guid>
			<description>#http协议 HTTP协议是基于TCP/IP协议的超文本传输协议，是一种应用层协议 抓取爬虫 spider
可以传输文件，图片，GIF动态图，电影
特点： 简单.快速.灵活，可以传递任意类型的文件
urrlib http包 request 请求 response 返回
域名可以进行泛解析
utf-8 gbk
代码 import urllib.request
response=urllib . request . urlopen(&amp;ldquo;http://www.baidu.com&amp;quot;) #域名/ip地址 html=response . read() html=html.decode(&amp;ldquo;utf-8&amp;rdquo;) print(html)
爬虫分两步：import urllib.request 抓取 import re 清洗 过滤</description>
			<content type="html"><![CDATA[<p>#http协议
HTTP协议是基于TCP/IP协议的超文本传输协议，是一种应用层协议  抓取爬虫  spider</p>

<p>可以传输文件，图片，GIF动态图，电影</p>

<p>特点： 简单.快速.灵活，可以传递任意类型的文件</p>

<p>urrlib http包    request 请求  response 返回</p>

<p>域名可以进行泛解析</p>

<p>utf-8    gbk</p>

<p>代码
import   urllib.request</p>

<p>response=urllib . request . urlopen(&ldquo;<a href="http://www.baidu.com&quot;">http://www.baidu.com&quot;</a>) #域名/ip地址
html=response . read()
html=html.decode(&ldquo;utf-8&rdquo;)
print(html)</p>

<p>爬虫分两步：import urllib.request  抓取
                     import  re  清洗 过滤</p>

<p><img src="../assets/tnn.png" alt="tn" /></p>
]]></content>
		</item>
		
		<item>
			<title>网络通信</title>
			<link>/posts/tcp/</link>
			<pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
			
			<guid>/posts/tcp/</guid>
			<description>#网络通信
DNS 把域名映射到ip地址上，就可以通过域名访问ip地址 python 编码 encode（） 解码 decode（） 服务端 server 客户端 client 英文是半角 中文是全角
查看内存地址：Windows Ipconfig 苹果系统 ifconfig tcp协议 三次握手四次挥手 优点： 稳定，可靠 应用：发邮件 缺点： 有延迟 占用系统资源多 特点：侦听客户端发送的信息 udp协议 优点：速度快 高效 应用：聊天软件 缺点：不稳定 连接不稳定 本地默认ip地址： 127.0.0.1 ping IP地址 www.baidu.com 查看网络是否连接
Tcp/ip 4层模型 : 应用层 传输层 网络层 网络接口层
数据结构：栈，队列，树，哈希，链表，顺序表
数据类型：list tuple str set（集合）dict（字典）
不可变的数据类型：元组，数字，字符串，布尔</description>
			<content type="html"><![CDATA[<p>#网络通信<br />
 DNS 把域名映射到ip地址上，就可以通过域名访问ip地址
python  编码 encode（）  解码 decode（）
服务端 server  客户端 client
英文是半角  中文是全角</p>

<p>查看内存地址：Windows Ipconfig  苹果系统  ifconfig
tcp协议     三次握手四次挥手
                优点： 稳定，可靠   应用：发邮件
                缺点： 有延迟 占用系统资源多
                 特点：侦听客户端发送的信息
udp协议  优点：速度快 高效      应用：聊天软件
                缺点：不稳定  连接不稳定
本地默认ip地址： 127.0.0.1
ping  IP地址  www.baidu.com  查看网络是否连接</p>

<p>Tcp/ip  4层模型 : 应用层 传输层 网络层 网络接口层</p>

<p>数据结构：栈，队列，树，哈希，链表，顺序表</p>

<p>数据类型：list tuple  str  set（集合）dict（字典）</p>

<p>不可变的数据类型：元组，数字，字符串，布尔</p>
]]></content>
		</item>
		
		<item>
			<title>mongo</title>
			<link>/posts/mongo/</link>
			<pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/mongo/</guid>
			<description>#mongo数据库操作 C:\Users\xx&amp;gt;mongo MongoDB shell version v4.0.5 connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb Implicit session: session { &amp;ldquo;id&amp;rdquo; : UUID(&amp;ldquo;543251bd-d6d9-4919-a74f-ca78fb584943&amp;rdquo;) } MongoDB server version: 4.0.5 Server has startup warnings: 2019-01-02T08:45:43.637+0800 I CONTROL [initandlisten] 2019-01-02T08:45:43.638+0800 I CONTROL [initandlisten] ** WARNING: Access control is not enabled for the database. 2019-01-02T08:45:43.640+0800 I CONTROL [initandlisten] ** Read and write access to data and configuration is unrestricted.
2019-01-02T08:45:43.641+0800 I CONTROL [initandlisten] Enable MongoDB&amp;rsquo;s free cloud-based monitoring service, which will then receive and display metrics about your deployment (disk utilization, CPU, operation statistics, etc).</description>
			<content type="html"><![CDATA[

<p>#mongo数据库操作
 C:\Users\xx&gt;mongo
MongoDB shell version v4.0.5
connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb
Implicit session: session { &ldquo;id&rdquo; : UUID(&ldquo;543251bd-d6d9-4919-a74f-ca78fb584943&rdquo;) }
MongoDB server version: 4.0.5
Server has startup warnings:
2019-01-02T08:45:43.637+0800 I CONTROL  [initandlisten]
2019-01-02T08:45:43.638+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-01-02T08:45:43.640+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</p>

<h2 id="2019-01-02t08-45-43-641-0800-i-control-initandlisten">2019-01-02T08:45:43.641+0800 I CONTROL  [initandlisten]</h2>

<p>Enable MongoDB&rsquo;s free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).</p>

<p>The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.</p>

<p>To enable free monitoring, run the following command: db.enableFreeMonitoring()</p>

<h2 id="to-permanently-disable-this-reminder-run-the-following-command-db-disablefreemonitoring">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</h2>

<blockquote>
<p>show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
db
test
use admin
switched to db admin
db
admin
show users
{
        &ldquo;_id&rdquo; : &ldquo;admin.sunzhiqi&rdquo;,
        &ldquo;user&rdquo; : &ldquo;sunzhiqi&rdquo;,
        &ldquo;db&rdquo; : &ldquo;admin&rdquo;,
        &ldquo;roles&rdquo; : [
                {
                        &ldquo;role&rdquo; : &ldquo;readWrite&rdquo;,
                        &ldquo;db&rdquo; : &ldquo;local&rdquo;
                }
        ],
        &ldquo;mechanisms&rdquo; : [
                &ldquo;SCRAM-SHA-1&rdquo;,
                &ldquo;SCRAM-SHA-256&rdquo;
        ]
}</p>

<p>db.dropUser(&lsquo;sunzhiqi&rsquo;)
true
show users
mongo -usunzhiqi -p
db.createUser({&lsquo;user&rsquo;:&lsquo;sunzhiqi&rsquo;,&lsquo;pwd&rsquo;:&lsquo;858362&rsquo;,roles:[&lsquo;root&rsquo;]})
Successfully added user: { &ldquo;user&rdquo; : &ldquo;sunzhiqi&rdquo;, &ldquo;roles&rdquo; : [ &ldquo;root&rdquo; ] }</p>

<p>db.auth(&lsquo;sunzhiqi&rsquo;,&lsquo;858362&rsquo;)
1
show dbs/users/collections
db.dropUser() 参数放用户名
创建库  use 库名</p>
</blockquote>

<p>db.库名.insert({})
db,dbname.insertMany([{},{},{}])
db.库名.find()
db.库名.remove({})
db.teacher.drop()删除当前集合
修改单个指定字段
db.student.update({&lsquo;name&rsquo;:&lsquo;希希&rsquo;},{$set:{&lsquo;name&rsquo;:&lsquo;郭希希&rsquo;}}))
修改字段
db.student.update({&lsquo;name&rsquo;:&ldquo;},{$set:{&lsquo;name&rsquo;:&ldquo;}},{upsert:true,&lsquo;multi&rsquo;:true})  multi默认是false只改找到的第一个true是修改所有   upsert：true如果有替换 如果没有插入   flase 不修改也不插入（默认）
删除
db.dbname.remove({},{justOne;true}) 删除所有，justOne：true删除一个
de.dbname.delete
设置集合的大小
db.createCollection(&lsquo;teacher&rsquo;,{capped:true,size:2})
db.teacher.isCapped()
db.teacher.DataSize()
⽅法  .pretty()： 将结果格式化
db.集合名称.find({条件⽂档}).pretty()
时间戳
Timestamp
时间日期
ISODate()
Date()
ISODate().valueOf()</p>

<p>查询方法
比较运算：小于$lt 小于等于$lte  大于$gt 大于等于$gte  不等于$ne
逻辑查询：and 直接用逗号
                 or db.dbname.find({$or:[{},{}]})
范围查询：$in db.dbname.find({age:{$in:[,,]}})   $nin
正则查询 ：db.dbname.find({&lsquo;age&rsquo;:{$regex:&ldquo;}})     // 或 $regex</p>

<p>skip（）和limit（）
db.dbname.skip(输几就跳几).limit(输几就取几个)</p>

<p>投影
db.dbname.find({必须要写，占位},{name:1,_id:0})
                                                            投影数据，1是显示，0是不显示
排序：sort 1是升序 -1是倒序
db.dbname.find().sort({&lsquo;price&rsquo;:1/-1})</p>

<p>db.sdhero.find({&lsquo;hometown&rsquo;:{$nin:[&lsquo;华山&rsquo;,&lsquo;桃花岛&rsquo;]}},{&lsquo;name&rsquo;:1,&lsquo;age&rsquo;:1,&lsquo;hometown&rsquo;:1,&rsquo;_id&rsquo;:0}).sort({&lsquo;name&rsquo;:1,&lsquo;age&rsquo;:-1})</p>

<p>count() db.dbname.find().count()</p>

<p>去重
db.dbname.distinct(&lsquo;去重字段&rsquo;,{条件})
3 mongodb中常见的数据类型
3.1 常见类型
Object ID： ⽂档ID
String： 字符串， 最常⽤， 必须是有效的UTF-8
Boolean： 存储⼀个布尔值， true或false
Integer： 整数可以是32位或64位， 这取决于服务器
Double： 存储浮点值
Arrays： 数组或列表， 多个值存储到⼀个键
Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档
Null： 存储Null值
Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数
Date： 存储当前⽇期或时间的UNIX时间格式</p>

<pre><code>    db.students.find({});
</code></pre>

<p>加$符是取值 不加是列名</p>

<p>创建索引
db.dbname.createIndex({&lsquo;字段名:1&rsquo;})  1是升序 -1是倒序
查询索引
db.dbname.getIndexes()
删除索引
db.dbname.dropIndex({&lsquo;字段名:1&rsquo;}) dropIndexes删除所有索引</p>

<p>查询时间
db.cars.find({&lsquo;carname&rsquo;:&lsquo;大众&rsquo;}).explain(&lsquo;executionStats&rsquo;)
db.cars.find({&lsquo;carname&rsquo;:&lsquo;大众&rsquo;}).explain(&lsquo;executionStats&rsquo;)
创建联合索引
db.dbname.createIndex({&lsquo;字段名:1&rsquo;,&lsquo;字段名&rsquo;:-1})
创建唯一索引 要是有重复数据的话唯一索引可能不能创建，
先清空集合数据在创建唯一索引，然后再插入数据
db.dbname.createIndex({&lsquo;字段名:1&rsquo;} },{&ldquo;unique&rdquo;:true})
建立索引注意点
根据需要选择是否需要建立唯一索引
索引字段是升序还是降序在单个索引的情况下不影响查询效率，但是带复合索引的条件下会有影响
数据量巨大并且数据库的读出操作非常频繁的时候才需要创建索引，如果写入操作非常频繁，创建索引会影响写入速度
mongodb的导入和导出个备份
1 备份
mongodump -u sunzhiqi -p858362 -d python -o test &ndash;authenticationDatabase admin
保证数据库安全，主要用于灾难处理
备份的语法：mongodump -h dbhost -d dbname -o dbdirectory
-h： 服务器地址， 也可以指定端⼝号
-d： 需要备份的数据库名称
-o： 备份的数据存放位置， 此⽬录中存放着备份出来的数据
示例：mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak
2 恢复
恢复语法：mongorestore -h dbhost -d dbname &ndash;dir dbdirectory 要当前路径
-h： 服务器地址
-d： 需要恢复的数据库实例
&ndash;dir： 备份数据所在位置
示例：mongorestore -h 192.168.196.128:27017 -d test2 &ndash;dir ~/Desktop/test1bak/test1
3 导出
mongoexport -u sunzhiqi -p858362 -d pyhon -c cars -o cars.json &ndash;authenticationDatabase admin
用于和其他平台进行交互对接，将数据导出成指定格式文件进行使用，比如数据分析常用的csv文件 用于给非计算机行业的用户查看数据，对于他们来说csv文件(打开之后是电子表格)更方便
导出语法: mongoexport -h dbhost -d dbname -c colname -o filename &ndash;type json/csv -f field
-h: 服务器地址
-d: 数据库名
-c: 集合名
-o: 导出文件名
&ndash;type: 文件类型，默认json格式，可选数据类型json，csv
-f: 需要导出的字段,导出为json格式的数据时可以不指定导出哪些字段，默认全部，导出成csv文件是必须指定
示例：mongoexport -h 192.168.196.128:27017 -d test2 -c col1 -o test1_col1 [&ndash;type csv -f name,age,number]
4 导入
mongoimport -u sunzhiqi -p858362 -d python -c cars &ndash;file cars.json &ndash;authenticationDatabase admin
导出语法: mongoimport -d dbname -c colname &ndash;file filename [&ndash;headerline &ndash;type json/csv -f field]
-h: 服务器地址
-d: 数据库名
-c: 集合名
-o: 导出文件名
&ndash;type: 文件类型，默认json格式，可选数据类型json，csv
-f: 需要导出的字段,导出为json格式的数据时可以不指定导出哪些字段，默认全部，导出成csv文件是必须指定
示例：mongoinport -h 127.0.0.1:27017 -d python -c students
mongo的聚合操作
2.1 常用管道命令
在mongodb中，⽂档处理完毕后， 通过管道进⾏下⼀次处理 常用管道命令如下：
$group： 将集合中的⽂档分组， 可⽤于统计结果
$match： 过滤数据， 只输出符合条件的⽂档
$project： 修改输⼊⽂档的结构， 如重命名、 增加、 删除字段、 创建计算结果
$sort： 将输⼊⽂档排序后输出
$limit： 限制聚合管道返回的⽂档数
$skip： 跳过指定数量的⽂档， 并返回余下的⽂档
2.2 常用表达式
表达式：处理输⼊⽂档并输出 语法：表达式:&lsquo;$列名&rsquo; 常⽤表达式:
$sum： 计算总和， $sum:1 表示以⼀倍计数
$avg： 计算平均值
$min： 获取最⼩值
$max： 获取最⼤值
$push： 在结果⽂档中插⼊值到⼀个数组中
db.students.aggregate({
     $group:{_id:&lsquo;$sex&rsquo;,names:{$push:&lsquo;$name&rsquo;}}
});
db.students.aggregate({
    $group:{_id:&lsquo;$sex&rsquo;,avgage:{$avg:&lsquo;$age&rsquo;}}
});
//放所有数据到数组中
db.students.aggregate({
    $group:{_id:&lsquo;$sex&rsquo;,names:{$push:&lsquo;$$ROOT&rsquo;}}
});</p>

<p>db.china.find()
db.china.aggregate({
       $group:{_id:&lsquo;$province&rsquo;,uid:{$push:&lsquo;$userid&rsquo;}}
})</p>

<p>db.cars.aggregate(
    {$match:{&lsquo;carname&rsquo;:&lsquo;大众&rsquo;}},
    {$group:{_id:{carname:&lsquo;$carname&rsquo;,price:&lsquo;$price&rsquo;}}},
    {$group:{_id:&lsquo;$_id.carname&rsquo;,price:{$push:&lsquo;$_id.price&rsquo;}}}
)</p>

<p>db.cars.aggregate(
{$match:{&lsquo;price&rsquo;:{$gt:500}}},
{$project:{_id:0,price:1,&lsquo;车名&rsquo;:&lsquo;$carname&rsquo;}},
{$group:{_id:&lsquo;$车名&rsquo;}},
{$skip:1},
//{$limit:2}
{$sort:{_id:1}}
);
db.opinion.aggregate(
       {$limit:10},
       {$match:{source:&lsquo;金评媒&rsquo;,tags:{$regex:&ldquo;平台跑路&rdquo;}}},
       {$project:{source:1,tags:1}}
);
db.opinion.aggregate(
       {$match:{&lsquo;cmt_cnt&rsquo;:{$gt:&lsquo;1&rsquo;}}},
       {$project:{cmt_cnt:1}}
);</p>

<p>db.china.aggregate(
       {$group:{_id:{province:&lsquo;$province&rsquo;,userid:&lsquo;$userid&rsquo;}}},
       {$group:{_id:{province:&lsquo;$_id.province&rsquo;},count:{$sum:1}}}
)</p>

<p>use python
db.cars.insertMany([{&lsquo;carname&rsquo;:&lsquo;大众&rsquo;,&lsquo;color&rsquo;:&lsquo;red&rsquo;,&lsquo;price&rsquo;:120000},{&lsquo;carname&rsquo;:&lsquo;奔驰&rsquo;,&lsquo;color&rsquo;:&lsquo;bule&rsquo;,&lsquo;price&rsquo;:400000},{&lsquo;carname&rsquo;:&lsquo;宝马&rsquo;,&lsquo;color&rsquo;:&lsquo;green&rsquo;,&lsquo;price&rsquo;:300000},{&lsquo;carname&rsquo;:&lsquo;奔驰&rsquo;,&lsquo;color&rsquo;:&lsquo;red&rsquo;,&lsquo;price&rsquo;:600000},{&lsquo;carname&rsquo;:&lsquo;大众&rsquo;,&lsquo;color&rsquo;:&lsquo;yellow&rsquo;,&lsquo;price&rsquo;:100000}])
db.cars.find()
db.cars.update({&lsquo;carname&rsquo;:&lsquo;奔驰&rsquo;},{$set:{&lsquo;producttime&rsquo;:ISODate().valueOf()}},{&lsquo;multi&rsquo;:true})
db.cars.find()
db.cars.update({&lsquo;carname&rsquo;:&lsquo;大众&rsquo;,&lsquo;color&rsquo;:&lsquo;red&rsquo;},{$set:{&lsquo;price&rsquo;:20000}},{&lsquo;multi&rsquo;:true})
db.cars.find({&lsquo;color&rsquo;:&lsquo;red&rsquo;})
db.cars.find({&lsquo;carname&rsquo;:&lsquo;奔驰&rsquo;,&lsquo;color&rsquo;:&lsquo;red&rsquo;})</p>

<p>db
db.sdhero.insertMany([{&ldquo;name&rdquo; : &ldquo;郭靖&rdquo;, &ldquo;hometown&rdquo; : &ldquo;蒙古&rdquo;, &ldquo;age&rdquo; : 20, &ldquo;gender&rdquo; : true },{&ldquo;name&rdquo; : &ldquo;黄蓉&rdquo;, &ldquo;hometown&rdquo; : &ldquo;桃花岛&rdquo;, &ldquo;age&rdquo; : 18, &ldquo;gender&rdquo; : false },{&ldquo;name&rdquo; : &ldquo;华筝&rdquo;, &ldquo;hometown&rdquo; : &ldquo;蒙古&rdquo;, &ldquo;age&rdquo; : 18, &ldquo;gender&rdquo; : false },{&ldquo;name&rdquo; : &ldquo;黄药师&rdquo;, &ldquo;hometown&rdquo; : &ldquo;桃花岛&rdquo;, &ldquo;age&rdquo; : 40, &ldquo;gender&rdquo; : true },{&ldquo;name&rdquo; : &ldquo;段誉&rdquo;, &ldquo;hometown&rdquo; : &ldquo;黄山&rdquo;, &ldquo;age&rdquo; : 16, &ldquo;gender&rdquo; : true },{&ldquo;name&rdquo; : &ldquo;段王爷&rdquo;, &ldquo;hometown&rdquo; : &ldquo;大理&rdquo;, &ldquo;age&rdquo; : 45, &ldquo;gender&rdquo; : true },{&ldquo;name&rdquo; : &ldquo;洪七公&rdquo;, &ldquo;hometown&rdquo; : &ldquo;华山&rdquo;, &ldquo;age&rdquo; : 18, &ldquo;gender&rdquo; : true }])
db.sdhero.find()
db.sdhero.find({age:{$gt:18,$lte:40},&lsquo;gender&rsquo;:true})
db.sdhero.find({&lsquo;hometown&rsquo;:{$in:[&lsquo;蒙古&rsquo;,&lsquo;大理&rsquo;]},&lsquo;age&rsquo;:{$gt:30},&lsquo;gender&rsquo;:true})
db.sdhero.find({$or:[{&lsquo;hometown&rsquo;:&lsquo;蒙古&rsquo;},{&lsquo;hometown&rsquo;:&lsquo;大理&rsquo;}],&lsquo;age&rsquo;:{$gt:30},&lsquo;gender&rsquo;:true})
db.sdhero.find({&lsquo;hometown&rsquo;:{$regex:&lsquo;蒙古|大理&rsquo;}})
db.sdhero.find({&lsquo;hometown&rsquo;:{$regex:&lsquo;山$|岛$&rsquo;},age:{$lt:40}})</p>

<p>1.格式化查看一年级二班students中的所有学生
2查看一年级二班students中所有年龄14 岁的学生
3.查看一年级二班students中所有年龄大于7岁并且小于 14 岁的所有男学生
4.查看一年级二班students所有年龄是 14 岁或 16 岁的学生
5.查看一年级二班students中所有兴趣爱好包括画画的学生
6.查看一年级二班的学生，男生（sex为 0）年龄值有哪些
7.查看所有优秀（&gt;=80）的学生姓名和得分，并降序排序
8.一年级二班students中，修改名为“张三”的学生，年龄为 8 岁，兴趣爱好为 跳舞和画画
9.给分数不及格的学生，添加 level：不及格
10.计算分数在60~80（包含60和80）之间的学生或者年龄在15~18（包含15和18），仅保留name和score，按照score降序，name升序</p>

<p>db.students.insert(
[{name:&ldquo;张三&rdquo;,age:18,sex:&ldquo;男&rdquo;,hobby:[&ldquo;喝酒&rdquo;,&ldquo;音乐&rdquo;,&ldquo;电影&rdquo;],score:70},
{name:&ldquo;李四&rdquo;,age:12,sex:&ldquo;男&rdquo;,hobby:[&ldquo;喝酒&rdquo;,&ldquo;音乐&rdquo;,&ldquo;电影&rdquo;],score:79},
{name:&ldquo;王兰&rdquo;,age:13,sex:&ldquo;女&rdquo;,hobby:[&ldquo;化妆&rdquo;,&ldquo;画画&rdquo;,&ldquo;观察&rdquo;],score:94},
{name:&ldquo;王五&rdquo;,age:14,sex:&ldquo;男&rdquo;,hobby:[&ldquo;烫头&rdquo;,&ldquo;打架&rdquo;,&ldquo;好人&rdquo;],score:86},
{name:&ldquo;赵花&rdquo;,age:15,sex:&ldquo;女&rdquo;,hobby:[&ldquo;绣花&rdquo;,&ldquo;学习&rdquo;,&ldquo;钢琴&rdquo;],score:70},
{name:&ldquo;赵六&rdquo;,age:16,sex:&ldquo;男&rdquo;,hobby:[&ldquo;抽烟&rdquo;,&ldquo;拉架&rdquo;,&ldquo;劝架&rdquo;],score:77},
{name:&ldquo;钱八&rdquo;,age:14,sex:&ldquo;男&rdquo;,hobby:[&ldquo;电脑&rdquo;,&ldquo;游戏&rdquo;,&ldquo;吃鸡&rdquo;],score:70},
{name:&ldquo;钱多&rdquo;,age:15,sex:&ldquo;男&rdquo;,hobby:[&ldquo;挣钱&rdquo;,&ldquo;研究&rdquo;,&ldquo;象棋&rdquo;],score:46},
{name:&ldquo;周静&rdquo;,age:17,sex:&ldquo;女&rdquo;,hobby:[&ldquo;学习&rdquo;,&ldquo;跳舞&rdquo;,&ldquo;唱歌&rdquo;],score:87},
{name:&ldquo;吴小&rdquo;,age:15,sex:&ldquo;男&rdquo;,hobby:[&ldquo;旅游&rdquo;,&ldquo;追星&rdquo;,&ldquo;娱乐&rdquo;],score:76}])
db.students.find().pretty()
db.students.find({&lsquo;age&rsquo;:14})
db.students.find({&lsquo;age&rsquo;:{$gt:7,$lt:14},&lsquo;sex&rsquo;:&lsquo;男&rsquo;})
db.students.find({$or:[{&lsquo;age&rsquo;:14},{&lsquo;age&rsquo;:16}]})
db.students.find({&lsquo;hobby&rsquo;:{$in:[&lsquo;画画&rsquo;]}});
db.students.distinct(&lsquo;age&rsquo;,{&lsquo;sex&rsquo;:&lsquo;男&rsquo;})
db.students.find({&lsquo;score&rsquo;:{$gte:80}},{&lsquo;name&rsquo;:1,&lsquo;score&rsquo;:1,&rsquo;_id&rsquo;:0})
db.students.update({&lsquo;name&rsquo;:&lsquo;张三&rsquo;},{$set:{&lsquo;age&rsquo;:8,&lsquo;hobby&rsquo;:[&lsquo;跳舞&rsquo;,&lsquo;画画&rsquo;]}})
db.students.find()
db.students.update({&lsquo;score&rsquo;:{$lt:60}},{$set:{&lsquo;level&rsquo;:&lsquo;不及格&rsquo;}})
db.students.find({$or:[{&lsquo;score&rsquo;:{$gte:60,$lte:80}},{&lsquo;age&rsquo;:{$gte:15,$lte:18}}]},{&lsquo;name&rsquo;:1,&lsquo;score&rsquo;:1,&rsquo;_id&rsquo;:0}).sort({&lsquo;score&rsquo;:-1,&lsquo;name&rsquo;:1})
db.students.find({},{&lsquo;name&rsquo;:1,&rsquo;_id&rsquo;:0,&lsquo;sex&rsquo;:1}).sort({&lsquo;sex&rsquo;:1})</p>

<p>db.opinion.find();
//1.查询出所有作者名称
db.opinion.find({},{&lsquo;author&rsquo;:1,&rsquo;_id&rsquo;:0});
//2.查询有融资的平台名称，并按照id降序排列
db.opinion.find({},{&lsquo;source&rsquo;:1}).sort({&rsquo;_id&rsquo;:-1})
//3.给gmt_create为空值的文档添加默认当前日期
db.opinion.update({&lsquo;gmt_create&rsquo;:&ldquo;},{$set:{&lsquo;gmt_create&rsquo;:ISODate()}},{&lsquo;multi&rsquo;:true})
//4.找出所有‘金评媒’或‘P2P观察网’中，所有跑路的信息记录。
db.opinion.find({&lsquo;source&rsquo;:{$regex:&lsquo;金评媒|P2P观察网&rsquo;}},{&lsquo;tags&rsquo;:1})
db.opinion.distinct(&lsquo;tags&rsquo;,{&lsquo;source&rsquo;:{$regex:&lsquo;金评媒|p2p&rsquo;}})
//5.找出所有item_pub_time下时间在2015-12-1至2015-12-15 之间的所有数据，并打印出文章title
db.opinion.find({&lsquo;item_pub_time&rsquo;:{$gt:&lsquo;2015-12-01&rsquo;,$lt:&lsquo;2015-12-15&rsquo;}},{&lsquo;title&rsquo;:1})
//6.统计出非‘金评媒’，非‘P2P理财’网的文章总数
db.opinion.find({&lsquo;source&rsquo;:{$nin:[&lsquo;金评媒&rsquo;,&lsquo;P2P理财&rsquo;]}}).count()
//7.删除item_pub_time时间在2015-12-1  以前的所有记录。
db.opinion.remove({&lsquo;item_pub_time&rsquo;:{$lt:&lsquo;2015-12-01&rsquo;}},{&lsquo;multi&rsquo;:true})
db.opinion.find().count()</p>

<p>//1.根据所有&rdquo;author&rdquo;分组，取出所有title
db.p2p.opinion.aggregate({$group:{_id:&lsquo;$author&rsquo;,title:{$push:&lsquo;$title&rsquo;}}})
//2.跳过十条取出十条数据，根据$$ROOT找到每条信息的title，author，和item_pub_time(只显示这三项)
db.p2p.opinion.aggregate({$skip:10},{$limit:10},{$project:{title:1,_id:0,author:1,item_pub_time:1}})
//3.过滤出所有cmt_cnt为0的数据，找到所有title，并且找到item_pud_time时间
db.p2p.opinion.aggregate({$match:{cmt_cnt:&lsquo;0&rsquo;}},{$project:{title:1,_id:0,item_pub_time:1}})
//4.找到所有url为空的信息，将空的url加上<a href="https://www.baidu.com">https://www.baidu.com</a>
//db.p2p.opinion.update({url:&ldquo;},{$set:{url:&lsquo;<a href="https://www.baidu.com'}},{upsert:true,multi:true}">https://www.baidu.com'}},{upsert:true,multi:true}</a>)
db.p2p.opinion.aggregate({$match:{url:{$nin:[&ldquo;]}}},{$project:{url:&lsquo;<a href="https://www.baidu.com',title:1,_id:0}}">https://www.baidu.com',title:1,_id:0}}</a>)
//5.找到所有cmt_cnt为0并且为金评媒的信息，利用porject只显示title，content
//db.p2p.opinion.aggregate({$match:{cmt_cnt:&lsquo;0&rsquo;,source:{$regex:&lsquo;金评媒&rsquo;}}},{$project:{title:1,_id:0,content:1}})
//6.根据source分组，输出属于p2p理财的新闻有多少记录
db.p2p.aggregate({$group:{_id:&lsquo;$source&rsquo;,count:{$sum:1}}},{$match:{_id:{$regex:&lsquo;P2P理财&rsquo;}}})
//7.过滤出item_pud_time 2015-12-15之后的信息，输出平台跑路的平台名称
db.p2p.aggregate({$match:{item_pub_time:{$gt:&lsquo;2015-12-15&rsquo;},tags:{$regex:&lsquo;平台跑路&rsquo;}}},{$project:{source:1,_id:0}})
//8.根据source分组，找到平台跑路的有多少个
db.p2p.aggregate(
    {$match:{tags:{$regex:&lsquo;平台跑路&rsquo;}}},
    {$group:{_id:&lsquo;$source&rsquo;,count:{$sum:1}}}<br />
    )
//9.过滤出所有p2p理财和金评媒的新闻根据id进行降序排列，找到前3条信息的title
db.p2p.aggregate(
   {$match:{source:{$regex:&lsquo;P2P理财&rsquo;,$regex:&lsquo;金评媒&rsquo;}}},
   {$sort:{_id:-1}},
   {$limit:3},
   {$project:{title:1}})
//10.输出跑路平台概率
db.p2p.aggregate(
{$match:{tags:{$regex:&lsquo;平台跑路&rsquo;}}},
{$group:{_id:null,count:{$sum:1}}}
)</p>

<p>//*新建一个数据库，将p3p添加到数据库中，对此数据库新建子用户，并使用此用户（该用户只对新建的库有读写操作）
//1、将所有空的author改为&rsquo;佚名&rsquo;。（更改原来的数据）
db.p3p1.update({author:&ldquo;},{$set:{author:&lsquo;佚名&rsquo;}},{mutli:true})
//2、找出item_pub_time中2015-12-10以后的信息并按id升序排列并且格式化输出
db.p3p1.aggregate({$match:{item_pub_time:{$lt:&lsquo;2015-12-10&rsquo;}}},{$sort:{id:1}}).pretty()
//3、找出id为200的数据，如果没有则添加只有_id为200的一条数据
db.p3p1.find({id:200},{$set:{id:200}},{upsert:true})
//4、删除item_pub_time中2015-12-1之前的数据
db.p3p1.remove({item_pub_time:{$lt:&lsquo;2015-12-01&rsquo;}})
//5、给gmt_create字段添加当前日期
db.p3p1.update({gmt_create:&ldquo;},{$set:{gmt_create:ISODate()}},{upsert:true})
//6、按平台跑路和平台融资分组并列出两者中的title都有哪些
db.p3p1.aggregate({$match:{tags:{$regex:&lsquo;平台&rsquo;}}},{$group:{_id:&lsquo;$tags&rsquo;,title:{$push:&lsquo;$title&rsquo;}}})
//7、按id排序，之后取出中间5-10条的内容，将所有url添加到一个数组中并计算总数
db.p3p1.aggregate({$sort:{_id:1}},{$skip:5},{$limit:5},{$group:{_id:null,url:{$push:&lsquo;$url&rsquo;},count:{$sum:1}}})
//8、按是否跑路分组，找出每组中最大时间和最小时间
db.p3p1.aggregate({$match:{tags:{$regex:&lsquo;平台&rsquo;}}},
{$group:{_id:&lsquo;$tags&rsquo;,max:{$max:&lsquo;$item_pub_time&rsquo;},min:{$min:&lsquo;$item_pub_time&rsquo;}}})
//9、根据source，item_pub_time分组，找出每组中有多少条content,只显示结果，不显示content内容
db.p3p1.aggregate({$group:{_id:{source:&lsquo;$source&rsquo;,item_pub_time:&lsquo;$item_pub_time&rsquo;},count:{$sum:1}}},{$project:{count:1,_id:0}})
//10、统计出每个source下的tags数量，结果中的字段为{&lsquo;source&rsquo;:&ldquo;,count:&ldquo;}（同一个tags只统计一次）
db.p3p1.aggregate({$group:{_id:{source:&lsquo;$source&rsquo;,tags:&lsquo;$tags&rsquo;}}},
{$group:{_id:{source1:&lsquo;$_id.source&rsquo;,tags:&lsquo;$_id.tags&rsquo;},count:{$sum:1}}}
)</p>
]]></content>
		</item>
		
		<item>
			<title>selenium用超级鹰破解验证码</title>
			<link>/posts/scripy3/</link>
			<pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/scripy3/</guid>
			<description>#selenium用超级鹰破解验证码 from selenium import webdriver from PIL import Image from chaojiying import Chaojiying_Client import time
driver = webdriver.Chrome()
driver.get(&amp;lsquo;http://ww.renren.com&#39;)
driver.find_element_by_xpath(&amp;lsquo;//[@id=&amp;ldquo;email&amp;rdquo;]&amp;lsquo;).send_keys(&amp;ldquo;15235926326&amp;rdquo;)#15249745204 driver.find_element_by_xpath(&amp;lsquo;//[@id=&amp;ldquo;password&amp;rdquo;]&amp;lsquo;).send_keys(&amp;lsquo;sun858362&amp;rsquo;)#123456789 #截屏 driver.save_screenshot(&amp;ldquo;renren.png&amp;rdquo;) #获取宽高和坐标（查找验证码所在元素，获取验证码的坐标和宽高，） img = driver.find_element_by_xpath(&amp;lsquo;//*[@id=&amp;ldquo;verifyPic_login&amp;rdquo;]&amp;lsquo;) #获取x坐标 x = img.location[&amp;lsquo;x&amp;rsquo;] #y坐标 y = img.location[&amp;lsquo;y&amp;rsquo;] #获取宽 width = img.size[&amp;lsquo;width&amp;rsquo;] #获取高 height = img.size[&amp;lsquo;height&amp;rsquo;] #抠图(在renren.png中抠图) pip install PIL screen = Image.open(&amp;lsquo;renren.png&amp;rsquo;) #加载截屏
code = screen.crop((x,y,x+width,y+height))#截出验证码 code.save(&amp;lsquo;code.png&amp;rsquo;) #将验证码保存 time.sleep(2) #发送给超级鹰破解 chaojiying = Chaojiying_Client(&amp;lsquo;15235926326&amp;rsquo;, &amp;lsquo;sun858362&amp;rsquo;, &amp;lsquo;96001&amp;rsquo;) im = open(&amp;lsquo;code.png&amp;rsquo;, &amp;lsquo;rb&amp;rsquo;).read() #2004 是超级鹰破解验证码的验证码类型 c = chaojiying.</description>
			<content type="html"><![CDATA[<p>#selenium用超级鹰破解验证码
from selenium import webdriver
from PIL import Image
from chaojiying import Chaojiying_Client
import time</p>

<p>driver = webdriver.Chrome()</p>

<p>driver.get(&lsquo;<a href="http://ww.renren.com'">http://ww.renren.com'</a>)</p>

<p>driver.find_element_by_xpath(&lsquo;//<em>[@id=&ldquo;email&rdquo;]&lsquo;).send_keys(&ldquo;15235926326&rdquo;)#15249745204
driver.find_element_by_xpath(&lsquo;//</em>[@id=&ldquo;password&rdquo;]&lsquo;).send_keys(&lsquo;sun858362&rsquo;)#123456789
#截屏
driver.save_screenshot(&ldquo;renren.png&rdquo;)
#获取宽高和坐标（查找验证码所在元素，获取验证码的坐标和宽高，）
img = driver.find_element_by_xpath(&lsquo;//*[@id=&ldquo;verifyPic_login&rdquo;]&lsquo;)
#获取x坐标
x = img.location[&lsquo;x&rsquo;]
#y坐标
y = img.location[&lsquo;y&rsquo;]
#获取宽
width = img.size[&lsquo;width&rsquo;]
#获取高
height = img.size[&lsquo;height&rsquo;]
#抠图(在renren.png中抠图) pip install PIL
screen = Image.open(&lsquo;renren.png&rsquo;) #加载截屏</p>

<p>code = screen.crop((x,y,x+width,y+height))#截出验证码
code.save(&lsquo;code.png&rsquo;) #将验证码保存
time.sleep(2)
#发送给超级鹰破解
chaojiying = Chaojiying_Client(&lsquo;15235926326&rsquo;, &lsquo;sun858362&rsquo;, &lsquo;96001&rsquo;)
im = open(&lsquo;code.png&rsquo;, &lsquo;rb&rsquo;).read()
#2004 是超级鹰破解验证码的验证码类型
c = chaojiying.PostPic(im,2004)[&lsquo;pic_str&rsquo;]
print&copy;
#将验证码输入到框里
driver.find_element_by_xpath(&lsquo;//<em>[@id=&ldquo;icode&rdquo;]&lsquo;).send_keys&copy;
time.sleep(3)
#点击登陆
driver.find_element_by_xpath(&lsquo;//</em>[@id=&ldquo;login&rdquo;]&lsquo;).click()</p>
]]></content>
		</item>
		
		<item>
			<title>爬虫</title>
			<link>/posts/scripy2/</link>
			<pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/scripy2/</guid>
			<description>#爬虫 爬虫特点：批量，要避免误伤 本质：模仿浏览器， 浏览器的头：user-agent ajax：（异步请求）防止反爬， 一个是网页，另一个往里填数据，抓取的只是一个空标签 防止爬虫的方法：ip频率限制（ip池，降低频率），用户信息（模拟），ajax（异步请求)，投毒给爬虫，诱捕
常见的爬虫种类：低级爬虫，创业公司的爬虫（偏正规化），失控的爬虫（服务器的压力大），成型商业，搜索引擎
http （默认）端口：80 （默认可以改）明文传输
https(保密)在云主机上上传证书（cn） 端口：443 ，加密传输 s是ssl
可以在阿里上买ECS（云主机 别名空间）可以分配IP
cookies 以键值对存储数据， 特点：保存小的数据，做一个加密的存储，在客户端存储，可以发送给server端
session：存储数据大，性能好，安全，有有效期。在服务端存储，爬取需要密码登陆的网页时会用到session（类似于浏览器密码登陆，时间长了需要重新登陆，默认30分钟）
获取响应头 cookies
字典 和 json的区别
共同点：都是key 和 value 形式
区别：
json:必须使用双引号；是一种数据格式；较少的操作方法；多用于数据传输和存储，
字典：单双都可以，是一种数据类型，内置方法较多；
字典{&amp;lsquo;username&amp;rsquo;:&amp;lsquo;zhangsan&amp;rsquo; , &amp;lsquo;score&amp;rsquo;:[123,111]} json{&amp;ldquo;username&amp;rdquo;:&amp;ldquo;zhangsan&amp;rdquo;,&amp;ldquo;score&amp;rdquo;:[{&amp;ldquo;shuxue&amp;rdquo;:10},{&amp;ldquo;yuwen&amp;rdquo;:20}]}
json中：{}代表对象，[]代表数组，{}与[]可以互相嵌套使用
分布式爬虫（redis，mongo）： 多台机器</description>
			<content type="html"><![CDATA[<p>#爬虫
爬虫特点：批量，要避免误伤  本质：模仿浏览器， 浏览器的头：user-agent
ajax：（异步请求）防止反爬， 一个是网页，另一个往里填数据，抓取的只是一个空标签
防止爬虫的方法：ip频率限制（ip池，降低频率），用户信息（模拟），ajax（异步请求)，投毒给爬虫，诱捕</p>

<p>常见的爬虫种类：低级爬虫，创业公司的爬虫（偏正规化），失控的爬虫（服务器的压力大），成型商业，搜索引擎</p>

<p>http （默认）端口：80 （默认可以改）明文传输</p>

<p>https(保密)在云主机上上传证书（cn） 端口：443 ，加密传输  s是ssl</p>

<p>可以在阿里上买ECS（云主机  别名空间）可以分配IP</p>

<p>cookies 以键值对存储数据， 特点：保存小的数据，做一个加密的存储，在客户端存储，可以发送给server端</p>

<p>session：存储数据大，性能好，安全，有有效期。在服务端存储，爬取需要密码登陆的网页时会用到session（类似于浏览器密码登陆，时间长了需要重新登陆，默认30分钟）</p>

<p>获取响应头 cookies</p>

<p>字典 和 json的区别</p>

<p>共同点：都是key 和 value 形式</p>

<p>区别：</p>

<p>json:必须使用双引号；是一种数据格式；较少的操作方法；多用于数据传输和存储，</p>

<p>字典：单双都可以，是一种数据类型，内置方法较多；</p>

<p>字典{&lsquo;username&rsquo;:&lsquo;zhangsan&rsquo; , &lsquo;score&rsquo;:[123,111]}
json{&ldquo;username&rdquo;:&ldquo;zhangsan&rdquo;,&ldquo;score&rdquo;:[{&ldquo;shuxue&rdquo;:10},{&ldquo;yuwen&rdquo;:20}]}</p>

<p>json中：{}代表对象，[]代表数组，{}与[]可以互相嵌套使用</p>

<p>分布式爬虫（redis，mongo）：
                    多台机器</p>
]]></content>
		</item>
		
		<item>
			<title>selenium爬取优酷页面并下载图片</title>
			<link>/posts/scripy/</link>
			<pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/scripy/</guid>
			<description>#selenium爬取优酷页面并下载图片 from selenium import webdriver import requests driver = webdriver.Chrome() #打开优酷 driver.get(&amp;ldquo;http://www.youku.com&amp;quot;) #点开优酷片库 driver.find_element_by_xpath(&amp;ldquo;//*[@id=&amp;rsquo;m_2544&amp;rsquo;]/div/ul/li[6]/span[1]/a&amp;rdquo;).click() #获取所有img元素 listImg = driver.find_elements_by_xpath(&amp;ldquo;//div[@class=&amp;lsquo;vaule_main&amp;rsquo;]//li/div/div/img&amp;rdquo;) #取img的src值 listSrc = [] for img in listImg: src = img.get_attribute(&amp;lsquo;src&amp;rsquo;) listSrc.append(src) print(len(listImg)) #下载图片 session = requests.session() for index,value in enumerate(listSrc): response = session.get(value) with open(str(index)+&amp;lsquo;.png&amp;rsquo;,mode=&amp;lsquo;wb&amp;rsquo;) as f: f.write(response.content)</description>
			<content type="html"><![CDATA[<p>#selenium爬取优酷页面并下载图片
from selenium import webdriver
import requests
driver = webdriver.Chrome()
#打开优酷
driver.get(&ldquo;<a href="http://www.youku.com&quot;">http://www.youku.com&quot;</a>)
#点开优酷片库
driver.find_element_by_xpath(&ldquo;//*[@id=&rsquo;m_2544&rsquo;]/div/ul/li[6]/span[1]/a&rdquo;).click()
#获取所有img元素
listImg = driver.find_elements_by_xpath(&ldquo;//div[@class=&lsquo;vaule_main&rsquo;]//li/div/div/img&rdquo;)
#取img的src值
listSrc = []
for img in listImg:
    src = img.get_attribute(&lsquo;src&rsquo;)
    listSrc.append(src)
print(len(listImg))
#下载图片
session = requests.session()
for index,value in enumerate(listSrc):
    response = session.get(value)
    with open(str(index)+&lsquo;.png&rsquo;,mode=&lsquo;wb&rsquo;) as f:
        f.write(response.content)</p>
]]></content>
		</item>
		
		<item>
			<title>selenium登陆qq邮箱页面</title>
			<link>/posts/scripy1/</link>
			<pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/scripy1/</guid>
			<description>#selenium登陆qq邮箱页面 from selenium import webdriver
driver = webdriver.Chrome()
driver.get(&amp;lsquo;https://mail.qq.com/cgi-bin/loginpage&#39;) #进入下一层才能执行下列操作 driver.switch_to.frame(&amp;ldquo;login_frame&amp;rdquo;) driver.find_element_by_class_name(&amp;lsquo;inputstyle&amp;rsquo;).send_keys(&amp;lsquo;账号&amp;rsquo;) driver.find_element_by_name(&amp;ldquo;p&amp;rdquo;).send_keys(&amp;lsquo;密码&amp;rsquo;) driver.find_element_by_class_name(&amp;lsquo;btn&amp;rsquo;).click()</description>
			<content type="html"><![CDATA[<p>#selenium登陆qq邮箱页面
from selenium import webdriver</p>

<p>driver = webdriver.Chrome()</p>

<p>driver.get(&lsquo;<a href="https://mail.qq.com/cgi-bin/loginpage'">https://mail.qq.com/cgi-bin/loginpage'</a>)
#进入下一层才能执行下列操作
driver.switch_to.frame(&ldquo;login_frame&rdquo;)
driver.find_element_by_class_name(&lsquo;inputstyle&rsquo;).send_keys(&lsquo;账号&rsquo;)
driver.find_element_by_name(&ldquo;p&rdquo;).send_keys(&lsquo;密码&rsquo;)
driver.find_element_by_class_name(&lsquo;btn&rsquo;).click()</p>
]]></content>
		</item>
		
		<item>
			<title>mysql 聚合函数</title>
			<link>/posts/mysql/</link>
			<pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/mysql/</guid>
			<description>#mysql 聚合函数
聚合函数的操作 count()、max()、min()、avg()、sum()
select count() from student; 打印student表里的总个数，总人数
select count(*) from student where gender = &amp;lsquo;女&amp;rsquo;; 打印student表格里女生的人数
select max(age) from student; 打印student表格里最大的年龄值
select min(age) from student where gender = &amp;lsquo;女&amp;rsquo;; 打印student表格里女生的最小年龄值
select sum(age) from student; 打印student表格里年龄累加的和
select avg(age) from student; 打印student表格里平均年龄,显示浮点数</description>
			<content type="html"><![CDATA[<p>#mysql 聚合函数</p>

<p>聚合函数的操作 count(<em>)、max()、min()、avg()、sum()<br />
select count(</em>) from student;                                                  打印student表里的总个数，总人数<br />
select count(*) from student where gender = &lsquo;女&rsquo;;                    打印student表格里女生的人数<br />
 select max(age) from student;                                                打印student表格里最大的年龄值<br />
 select min(age) from student where gender = &lsquo;女&rsquo;;                  打印student表格里女生的最小年龄值<br />
 select sum(age) from student;                                                 打印student表格里年龄累加的和<br />
 select avg(age) from student;                                                  打印student表格里平均年龄,显示浮点数</p>
]]></content>
		</item>
		
		<item>
			<title>mysql分组和排序操作</title>
			<link>/posts/typography/</link>
			<pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/typography/</guid>
			<description>#mysql分组和排序操作
分组、排序操作
select * from student order by id desc,height asc; 排序,mysql默认根据主键正序排列,order by 排序字段,asc正序,desc倒序,防止一个条件相同内容导致无法排序,再增加第二个排序条件进行排序
select count(*),gender from student group by gender; group by分组,以gender分组,select与from之间为打印出来的内容,分别统计男、女人数
select count(*),age from student where age = 20 group by age; 打印student表格里年龄为20的人数
select count(*),age,group_concat(id) from student where age = 20 group by age;
select gender,count() from student group by gender having count() &amp;gt; 3; student表格里以gender分组,打印gender与count个数,having必须跟group by使用,是在分组后二次筛选
select * from student limit 1,2; limit限制 1:从第二个开始,取2个数据
select * from student order by rand() limit 1,2; order by rand()随机取数据</description>
			<content type="html"><![CDATA[<p>#mysql分组和排序操作</p>

<p>分组、排序操作</p>

<p>select * from student order by id desc,height asc;                                                         排序,mysql默认根据主键正序排列,order by 排序字段,asc正序,desc倒序,防止一个条件相同内容导致无法排序,再增加第二个排序条件进行排序</p>

<p>select count(*),gender from student group by gender;                                                   group by分组,以gender分组,select与from之间为打印出来的内容,分别统计男、女人数</p>

<p>select count(*),age from student where age = 20 group by age;                                  打印student表格里年龄为20的人数</p>

<p>select count(*),age,group_concat(id) from student where age = 20 group by age;</p>

<p>select gender,count(<em>) from student group by gender having count(</em>) &gt; 3;                  student表格里以gender分组,打印gender与count个数,having必须跟group by使用,是在分组后二次筛选</p>

<p>select * from student limit 1,2;                                                                                         limit限制 1:从第二个开始,取2个数据</p>

<p>select * from student order by rand() limit 1,2;                                                                order by rand()随机取数据</p>

<p>select gender,count(*) from student group by gender with rollup;                                       以gender分组,gender和count,   with rollup累加count</p>
]]></content>
		</item>
		
		<item>
			<title>mysql自关联和多表连接查询</title>
			<link>/posts/post-with-featured-image/</link>
			<pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/post-with-featured-image/</guid>
			<description>#mysql自关联和多表连接查询
多表连接查询 inner join 内查询 left join 左查询 right join 右查询
select student.id,student.name,classes.name from student inner join classes on student.cls_id = classes.id;
inner join内连 left join左连 right join右连 表名join 表名 on 连接字段
select student.name,course_student.cid from student left join course_student on student.id = course_student.sid;
以student.id与course_student.sid连接匹配,打印student.name,course_student.cid
select student.name,course.name from student left join course_student on student.id = course_student.sid left join course on course_student.cid =course.id; 三表(2明细表+1关系表)相连取交集打印学生名字与课程名字  select * from areas as p inner join areas as a on p.</description>
			<content type="html"><![CDATA[<p>#mysql自关联和多表连接查询</p>

<p>多表连接查询  inner  join 内查询   left  join  左查询   right  join  右查询</p>

<p>select student.id,student.name,classes.name from student inner join classes on student.cls_id = classes.id;<br />
  inner join内连 left join左连 right join右连     表名join 表名 on 连接字段</p>

<p>select student.name,course_student.cid from student left join course_student on student.id = course_student.sid;<br />
  以student.id与course_student.sid连接匹配,打印student.name,course_student.cid</p>

<pre><code>select student.name,course.name from student left join course_student on student.id = course_student.sid left join course on course_student.cid =course.id;                                                                    三表(2明细表+1关系表)相连取交集打印学生名字与课程名字       
</code></pre>

<p>select * from areas as p inner join areas as a on p.aid = a.pid where p.atitle = &lsquo;河南省&rsquo;;<br />
      省、市，两表查询在一张表里(as起别名)用上级id打印，</p>

<p>select * from areas as p inner join areas as c on c.pid = p.aid inner join areas as a on a.pid = c.aid where a.atitle = &lsquo;二七区&rsquo;;<br />
      省、市、区，三表查询在一张表里(as起别名)用上级id打印区表title为‘二七区’的数据</p>

<p>select * from from areas as p inner join areas as c on c.pid = p.aid inner join areas as  as a on a.pid = c.aid where p.atitle = &lsquo;河南省&rsquo;;<br />
  打印河南省所有的市和所有的区</p>
]]></content>
		</item>
		
		<item>
			<title>视图的操作 </title>
			<link>/posts/the-figure-shortcode/</link>
			<pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/the-figure-shortcode/</guid>
			<description>###视图的操作
定义：通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上
视图的作用：提高了重用性，就像一个函数，对数据库重构，却不影响程序的运行，提高了安全性能，可以对不同的用户，让数据更加清晰，方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性；更加安全，数据库授权命令不能限定到特定行和特定列，但是通过合理创建视图，可以把权限限定到行列级别；
事务特性：原子性、一致性、隔离性、持久性
原子性（atomicity） 一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性 一致性（consistency） 数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。） 隔离性（isolation） 通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。） 持久性（durability） 一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）
使用场合：权限控制的时候，不希望用户访问表中某些含敏感信息的列，比如salary&amp;hellip;关键信息来源于多个复杂关联表，可以创建视图提取我们需要的信息，简化操作；
create view v_areas as select * from areas; view视图,建立在表基础之上,as定界符(as前固定格式,as后是表数据)，将areas表格创建为视图v_areas
select * from v_areas; 查看视图数据
create or replace view v_areas as select * from student; 改 将v_areas视图里的数据替换为student表格里的数据
create or replace view test4 as select t1.name as tname,t2.* from test as t1 LEFT JOIN test1 as t2 on t1.pid = t2.id; 修改视图
drop view v_areas; 删除视图v_areas
视图的内容会随着主表的内容改变而改变，修改视图的内容主表的内容也会随之而改变。
事务：begin 或 start transaction 开启事务 rollback 回滚 只能返回上一次操作 commit 提交 一旦提交后就不能回复</description>
			<content type="html"><![CDATA[<p>###视图的操作<br />
         定义：通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上<br />
视图的作用：提高了重用性，就像一个函数，对数据库重构，却不影响程序的运行，提高了安全性能，可以对不同的用户，让数据更加清晰，方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性；更加安全，数据库授权命令不能限定到特定行和特定列，但是通过合理创建视图，可以把权限限定到行列级别；<br />
事务特性：原子性、一致性、隔离性、持久性<br />
                                                                                                                                                                                              原子性（atomicity） 一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性  一致性（consistency） 数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）  隔离性（isolation） 通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）  持久性（durability） 一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）</p>

<p>使用场合：权限控制的时候，不希望用户访问表中某些含敏感信息的列，比如salary&hellip;关键信息来源于多个复杂关联表，可以创建视图提取我们需要的信息，简化操作；</p>

<p>create view v_areas as select * from areas;             view视图,建立在表基础之上,as定界符(as前固定格式,as后是表数据)，将areas表格创建为视图v_areas</p>

<p>select * from v_areas;                                                      查看视图数据</p>

<p>create or replace view v_areas as select * from student;                                    改 将v_areas视图里的数据替换为student表格里的数据</p>

<p>create or replace view test4 as select t1.name as tname,t2.* from test as t1 LEFT JOIN test1 as t2 on t1.pid = t2.id;                            修改视图</p>

<p>drop view v_areas;                                   删除视图v_areas</p>

<p>视图的内容会随着主表的内容改变而改变，修改视图的内容主表的内容也会随之而改变。</p>

<p>事务：begin 或 start transaction  开启事务
　　　rollback  回滚 只能返回上一次操作
　　　commit  提交 一旦提交后就不能回复</p>
]]></content>
		</item>
		
		<item>
			<title>正则表达式</title>
			<link>/posts/creating-a-new-theme/</link>
			<pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/creating-a-new-theme/</guid>
			<description>正则表达式 元字符 pip Beautiful Soup 美汤 import re 导入 正则的功能：抓取，判断，过滤
. 就是匹配所有all 除了（\n） 转义（/.)用于中间有点的时候 [1-9] [1,2,3] [A,B,C] [548932] [9876543210] 匹配范围 区间 \d 匹配所有数字0-9 \D 除去所有数字 \w 匹配单词字符 a-z, A-Z ,0-9, 下划线 用于匹配邮箱 \W 除去所有的字母数字 剩（#%） \s 匹配空白 即空格，tab键 \S匹配非空白 str.strip()自动去除前后空格 (163|QQ|) 配置表达式 | 是或者的意思 (?= ) 向前查找 ret=re.match(&amp;ldquo;^(?=.[a-z])(?=.[A-Z])(?=.*[0-9])[\w]{6}$&amp;ldquo;,password) 修饰元字符 greed 贪婪 * + lazy 懒惰 ？ ^a 定制必须是以a开头的 a$ 定制必须以a结尾 [^a] 排除a
(1) 不是元组 是数字1 (1,) 元组必须有逗号 @qq163|QQ| (163|QQ|) 配置表达式 | 是或者的意思</description>
			<content type="html"><![CDATA[

<h2 id="正则表达式">正则表达式</h2>

<p>元字符
pip  Beautiful  Soup  美汤
import  re  导入
正则的功能：抓取，判断，过滤</p>

<p>.   就是匹配所有all 除了（\n）     转义（/.)用于中间有点的时候
[1-9]   [1,2,3]   [A,B,C]   [548932]   [9876543210]  匹配范围 区间
\d 匹配所有数字0-9
\D 除去所有数字
\w 匹配单词字符 a-z, A-Z ,0-9, 下划线       用于匹配邮箱
\W 除去所有的字母数字 剩（#%）
\s 匹配空白 即空格，tab键
\S匹配非空白
str.strip()自动去除前后空格
(163|QQ|) 配置表达式 | 是或者的意思
(?=  ) 向前查找
ret=re.match(&ldquo;^(?=.<em>[a-z])(?=.</em>[A-Z])(?=.*[0-9])[\w]{6}$&ldquo;,password)
修饰元字符
greed 贪婪 *  +
lazy  懒惰   ？
^a 定制必须是以a开头的
a$ 定制必须以a结尾
[^a] 排除a</p>

<p>(1) 不是元组 是数字1
(1,) 元组必须有逗号
@qq163|QQ|
(163|QQ|) 配置表达式 | 是或者的意思</p>

<pre><code> import  re
 ret=re.match(&quot;163&quot;,&quot;163.com&quot;) ##163是想要找的内容 ，从163.com里找想要的内容
 
 print(ret.group())
 
match 是从头开始匹配 否则报错
str=&quot; &quot;
a= re.compile(&quot; &quot;)
print(a.findall(str))
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>mysql 子查询</title>
			<link>/posts/hugoisforlovers/</link>
			<pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/hugoisforlovers/</guid>
			<description>#mysql 子查询 select * from students where age &amp;gt; (select avg(age) from students);
select name from classes where id in (select cls_id from students);
select * from students where (height,age) = (select max(height), max(age) from students);
子查询
在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句
主查询 主要查询的对象,第一条 select 语句 主查询和子查询的关系 1.子查询是嵌入到主查询中 2.子查询是辅助主查询的,要么充 当条件,要么充当数据源 3.子查询是可以独立存在的语句,是一条完整的 select 语句
子查询分类 标量子查询 返回的结果是一个数据(一行一列)只能用比较用算符
列子查询 返回的结果是一列(一列多行)
行子查询 返回的结果是一行(一行多列)
select * from student where gender = &amp;lsquo;男&amp;rsquo; and height &amp;gt;(select avg(height) from student); 列出身高大于平均身高的数据 标量子查询:返回定值,数字、字符串</description>
			<content type="html"><![CDATA[<p>#mysql 子查询
select * from students where age &gt; (select avg(age)  from students);</p>

<p>select name from classes where  id in (select cls_id from students);</p>

<p>select * from students where (height,age) = (select max(height), max(age) from students);</p>

<p>子查询<br />
         在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句<br />
         主查询  主要查询的对象,第一条 select 语句                                             主查询和子查询的关系           1.子查询是嵌入到主查询中 2.子查询是辅助主查询的,要么充    当条件,要么充当数据源 3.子查询是可以独立存在的语句,是一条完整的 select 语句<br />
         子查询分类       标量子查询        返回的结果是一个数据(一行一列)只能用比较用算符<br />
                     列子查询           返回的结果是一列(一列多行)<br />
                     行子查询           返回的结果是一行(一行多列)<br />
 select * from student where gender = &lsquo;男&rsquo; and height &gt;(select avg(height) from student);                  列出身高大于平均身高的数据   标量子查询:返回定值,数字、字符串<br />
select * from student where cls_id in (select id from classes where id in (1,2));                         列出学生报课程id为在(1,2)范围内的数据  列子查询(一列多行)用in范围查找</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL 数据库</title>
			<link>/posts/goisforlovers/</link>
			<pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/goisforlovers/</guid>
			<description>#MySQL 数据库 什么是数据库？
 数据库(Database)是按照数据结构来组织，存储和管理数据的，建立在计算机存储设备上的仓库。  mysql 常用数据库引擎：innodb muisam
常用的数据库有哪些？
 mysql(百万级的数据库)，被Oracle收购 access(微软，淘汰) sql server(微软新版) Oracle 甲骨文(比mysql更高级的数据库)  MySQL简介
命令行操作mysql
cd d:/xampp/mysql/bin d: netstat -an|find &amp;ldquo;3306&amp;rdquo; 监听 mysql -uroot -p密码 修改密码 use mysql; update user set password = password(&amp;lsquo;858362&amp;rsquo;) where user = &amp;lsquo;root&amp;rsquo;; 退出 quit exit select version()； 查看版本号 select now()； 查看时间 select 6*6; 可以运算
创建数据库 create database python_test_01 charset=utf8; show databases; 查看创建的数据库 删除数据库 drop database python_test_01; 选择数据库 use python_test_01;</description>
			<content type="html"><![CDATA[<p>#MySQL 数据库
什么是数据库？</p>

<pre><code> 数据库(Database)是按照数据结构来组织，存储和管理数据的，建立在计算机存储设备上的仓库。
</code></pre>

<p>mysql 常用数据库引擎：innodb    muisam</p>

<p>常用的数据库有哪些？</p>

<pre><code>   mysql(百万级的数据库)，被Oracle收购

   access(微软，淘汰)

   sql  server(微软新版)

    Oracle 甲骨文(比mysql更高级的数据库)
</code></pre>

<p>MySQL简介</p>

<p>命令行操作mysql</p>

<p>cd d:/xampp/mysql/bin
d:
netstat -an|find &ldquo;3306&rdquo;  监听
mysql -uroot -p密码
修改密码
use mysql;
update user set password = password(&lsquo;858362&rsquo;) where user = &lsquo;root&rsquo;;
退出 quit exit
select version()； 查看版本号
select now()；      查看时间
select 6*6; 可以运算</p>

<p>创建数据库
create database python_test_01 charset=utf8;
show databases; 查看创建的数据库
删除数据库
drop database python_test_01;
选择数据库
use python_test_01;</p>
]]></content>
		</item>
		
		<item>
			<title>mysql比较运算,逻辑运算,范围查询,模糊查询</title>
			<link>/posts/migrate-from-jekyll/</link>
			<pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/migrate-from-jekyll/</guid>
			<description>#mysql比较运算,逻辑运算,范围查询,模糊查询 比较运算 &amp;gt; &amp;lt; = != &amp;lt;&amp;gt; &amp;lt;= &amp;gt;= 逻辑运算 and or not 范围查询 in
模糊查询 like
select distinct age from classes; 将classes表格里age去重
select * from classes where id &amp;lt;= 3; 打印classes表格里id&amp;lt;=3的数据 (&amp;lt;&amp;gt;、!=)除了整形还可以用于datetime
select * from classes where num is(not) null; 打印classes表格里num栏是(否)为null is 和 not 只能用来判断null
select * from student where add_time between &amp;lsquo;2018-05-08&amp;rsquo; and &amp;lsquo;2018-05-10 09:00:00&amp;rsquo;; 打印student表格里add_time栏里时间在两者之间的数据,between and相当于&amp;gt;=、&amp;lt;=可作用于时间和整形
select name from student where id &amp;gt; 1 and id &amp;lt; 3; 打印student表格里id&amp;gt;1并&amp;lt;3的name栏 and or not 逻辑运算符</description>
			<content type="html"><![CDATA[<p>#mysql比较运算,逻辑运算,范围查询,模糊查询
比较运算 &gt; &lt; =  !=  &lt;&gt;   &lt;=  &gt;=
逻辑运算  and  or  not
范围查询  in<br />
模糊查询  like</p>

<p>select distinct age from classes;                                 将classes表格里age去重<br />
select * from classes where id &lt;= 3;                               打印classes表格里id&lt;=3的数据  (&lt;&gt;、!=)除了整形还可以用于datetime<br />
select * from classes where num is(not) null;                   打印classes表格里num栏是(否)为null       is 和 not 只能用来判断null<br />
select * from student where add_time between &lsquo;2018-05-08&rsquo; and &lsquo;2018-05-10 09:00:00&rsquo;;        打印student表格里add_time栏里时间在两者之间的数据,between and相当于&gt;=、&lt;=可作用于时间和整形<br />
select name from student where id &gt; 1 and id &lt; 3;        打印student表格里id&gt;1并&lt;3的name栏   and or not 逻辑运算符<br />
 select * from student where name like &lsquo;小%&rsquo;;             模糊查找 like 打印student表格里姓名栏(字段)里以&rsquo;小&rsquo;开头的数据
select * from student where name like &lsquo;%张%&rsquo;;<br />
select * from student where name like &lsquo;_明&rsquo;;                 占位匹配  _  一个下划线代表一个字符<br />
 select * from student where id (not) in (1,2,3);               打印student表格里id是(否)在(1,2,3)里的数据，是否在范围内</p>
]]></content>
		</item>
		
		<item>
			<title>人工智能</title>
			<link>/posts/python/</link>
			<pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
			
			<guid>/posts/python/</guid>
			<description>##人工智能 人工智能（artificial intelligence）。英文缩写AI ，开发语言是python。他是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式作出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统。</description>
			<content type="html"><![CDATA[<p>##人工智能
人工智能（artificial intelligence）。英文缩写AI ，开发语言是python。他是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式作出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统。</p>
]]></content>
		</item>
		
	</channel>
</rss>
